[{:doc-fragments
 [{:type "text", :content "A "}
  {:type "html", :content "<i> thread </i>"}
  {:type "text",
   :content
   " is a thread of execution in a program. The Java\nVirtual Machine allows an application to have multiple threads of\nexecution running concurrently.\n\nEvery thread has a priority. Threads with higher priority are\nexecuted in preference to threads with lower priority. Each thread\nmay or may not also be marked as a daemon. When code running in\nsome thread creates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content
   " object, the new\nthread has its priority initially set equal to the priority of the\ncreating thread, and is a daemon thread if and only if the\ncreating thread is a daemon.\n\nWhen a Java Virtual Machine starts up, there is usually a single\nnon-daemon thread (which typically calls the method named\n"}
  {:type "html", :content "<pre>main</pre> "}
  {:type "text",
   :content
   " of some designated class). The Java Virtual\nMachine continues to execute threads until either of the following\noccurs:\n"}
  {:type "html",
   :content
   "<ul> \n  <li> The  <pre>exit</pre>   method of class  <pre>Runtime</pre>   has been\n     called and the security manager has permitted the exit operation\n     to take place.\n  <li> All threads that are not daemon threads have died, either by\n     returning from the call to the  <pre>run</pre>   method or by\n     throwing an exception that propagates beyond the  <pre>run</pre>  \n     method.\n  </ul>"}
  {:type "text",
   :content
   "\n\nThere are two ways to create a new thread of execution. One is to\ndeclare a class to be a subclass of "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content ". This\nsubclass should override the "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text", :content " method of class\n"}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content
   ". An instance of the subclass can then be\nallocated and started. For example, a thread that computes primes\nlarger than a stated value could be written as follows:\n"}
  {:type "html",
   :content
   "<hr> <blockquote> <pre> \n     class PrimeThread extends Thread {\n         long minPrime;\n         PrimeThread(long minPrime) {\n             this.minPrime = minPrime;\n         }\n\npublic void run() {\n             // compute primes larger than minPrime\n              &nbsp; . &nbsp; . &nbsp; .\n         }\n     }\n  </pre> </blockquote> <hr>"}
  {:type "text",
   :content
   "\n\nThe following code would then create a thread and start it running:\n"}
  {:type "html",
   :content
   "<blockquote> <pre> \n     PrimeThread p = new PrimeThread(143);\n     p.start();\n  </pre> </blockquote>"}
  {:type "text",
   :content
   "\n\nThe other way to create a thread is to declare a class that\nimplements the "}
  {:type "html", :content "<pre>Runnable</pre> "}
  {:type "text",
   :content " interface. That class then\nimplements the "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content
   " method. An instance of the class can\nthen be allocated, passed as an argument when creating\n"}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content
   ", and started. The same example in this other\nstyle looks like the following:\n"}
  {:type "html",
   :content
   "<hr> <blockquote> <pre> \n     class PrimeRun implements Runnable {\n         long minPrime;\n         PrimeRun(long minPrime) {\n             this.minPrime = minPrime;\n         }\n\npublic void run() {\n             // compute primes larger than minPrime\n              &nbsp; . &nbsp; . &nbsp; .\n         }\n     }\n  </pre> </blockquote> <hr>"}
  {:type "text",
   :content
   "\n\nThe following code would then create a thread and start it running:\n"}
  {:type "html",
   :content
   "<blockquote> <pre> \n     PrimeRun p = new PrimeRun(143);\n     new Thread(p).start();\n  </pre> </blockquote>"}
  {:type "text",
   :content
   "\n\nEvery thread has a name for identification purposes. More than\none thread may have the same name. If a name is not specified when\na thread is created, a new name is generated for it.\n\nUnless otherwise noted, passing a "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " argument to a constructor\nor method in this class will cause a "}
  {:type "html", :content "<pre>NullPointerException</pre> "}
  {:type "text", :content " to be\nthrown."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "A "}
  {:type "html", :content "<i> thread </i>"}
  {:type "text", :content " is a thread of execution in a program."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Set the default handler invoked when a thread abruptly terminates\ndue to an uncaught exception, and no other handler has been defined\nfor that thread.\n\nUncaught exception handling is controlled first by the thread, then\nby the thread's "}
  {:type "html", :content "<pre>ThreadGroup</pre> "}
  {:type "text",
   :content
   " object and finally by the default\nuncaught exception handler. If the thread does not have an explicit\nuncaught exception handler set, and the thread's thread group\n(including parent thread groups)  does not specialize its\n"}
  {:type "html", :content "<pre>uncaughtException</pre> "}
  {:type "text", :content " method, then the default handler's\n"}
  {:type "html", :content "<pre>uncaughtException</pre> "}
  {:type "text",
   :content
   " method will be invoked.\n\nBy setting the default uncaught exception handler, an application\ncan change the way in which uncaught exceptions are handled (such as\nlogging to a specific device, or file) for those threads that would\nalready accept whatever "}
  {:type "html", :content "&quot;"}
  {:type "text", :content "default"}
  {:type "html", :content "&quot;"}
  {:type "text",
   :content
   " behavior the system\nprovided.\n\nNote that the default uncaught exception handler should not usually\ndefer to the thread's "}
  {:type "html", :content "<pre>ThreadGroup</pre> "}
  {:type "text",
   :content " object, as that could cause\ninfinite recursion."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Set the default handler invoked when a thread abruptly terminates\ndue to an uncaught exception, and no other handler has been defined\nfor that thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>eh</pre>:&nbsp;"}
  {:type "text",
   :content
   "the object to use as the default uncaught exception handler.\nIf "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " then there is no default handler.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if a security manager is present and it denies\n"}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>(\"setDefaultUncaughtExceptionHandler\")</pre> "}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the current thread has been interrupted.  The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the thread is cleared by this method.  In\nother words, if this method were to be called twice in succession, the\nsecond call would return false (unless the current thread were\ninterrupted again, after the first call had cleared its interrupted\nstatus and before the second call had examined it)."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Tests whether the current thread has been interrupted."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content " if the current thread has been interrupted;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests if this thread is alive. A thread is alive if it has\nbeen started and has not yet died."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Tests if this thread is alive."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if this thread is alive;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Sets the context ClassLoader for this Thread. The context\nClassLoader can be set when a thread is created, and allows\nthe creator of the thread to provide the appropriate class loader,\nthrough "}
  {:type "html", :content "<pre>getContextClassLoader</pre> "}
  {:type "text",
   :content
   ", to code running in the thread\nwhen loading classes and resources.\n\nIf a security manager is present, its "}
  {:type "html",
   :content
   "<pre>SecurityManager#checkPermission(java.security.Permission)</pre> "}
  {:type "text", :content "\nmethod is invoked with a "}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>\n (\"setContextClassLoader\")</pre> "}
  {:type "text",
   :content
   " permission to see if setting the context\nClassLoader is permitted."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Sets the context ClassLoader for this Thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>cl</pre>:&nbsp;"}
  {:type "text",
   :content
   "the context ClassLoader for this Thread, or null  indicating the\nsystem class loader (or, failing that, the bootstrap class loader)\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot set the context ClassLoader"}]}

{:doc-fragments
 [{:type "text", :content "Interrupts this thread.\n\n"}
  {:type "html",
   :content
   "<p>  Unless the current thread is interrupting itself, which is\n always permitted, the  <pre>#checkAccess()</pre>   method\n of this thread is invoked, which may cause a  <pre>SecurityException</pre>   to be thrown.\n\n<p>  If this thread is blocked in an invocation of the  <pre>Object#wait()</pre>  ,  <pre>Object#wait(long)</pre>  , or  <pre>Object#wait(long, int)</pre>   methods of the  <pre>Object</pre>  \n class, or of the  <pre>#join()</pre>  ,  <pre>#join(long)</pre>  ,  <pre>#join(long, int)</pre>  ,  <pre>#sleep(long)</pre>  , or  <pre>#sleep(long, int)</pre>  \n methods of this class, then its interrupt status will be cleared and it\n will receive an  <pre>InterruptedException</pre>  .\n\n<p>  If this thread is blocked in an I/O operation upon an  <pre>java.nio.channels.InterruptibleChannel</pre>  \n then the channel will be closed, the thread's interrupt\n status will be set, and the thread will receive a  <pre>java.nio.channels.ClosedByInterruptException</pre>  .\n\n<p>  If this thread is blocked in a  <pre>java.nio.channels.Selector</pre>  \n then the thread's interrupt status will be set and it will return\n immediately from the selection operation, possibly with a non-zero\n value, just as if the selector's  <pre>java.nio.channels.Selector#wakeup</pre>   method were invoked.\n\n<p>  If none of the previous conditions hold then this thread's interrupt\n status will be set.  </p>\n\n<p>  Interrupting a thread that is not alive need not have any effect."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Interrupts this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot modify this thread"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns a reference to the currently executing thread object."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns a reference to the currently executing thread object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "the currently executing thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Throws CloneNotSupportedException as a Thread can not be meaningfully\ncloned. Construct a new Thread instead."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Throws CloneNotSupportedException as a Thread can not be meaningfully\ncloned."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>CloneNotSupportedException</pre>:&nbsp;"}
  {:type "text", :content "always"}]}

{:doc-fragments
 [{:type "text", :content "Tests if this thread is a daemon thread."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Tests if this thread is a daemon thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if this thread is a daemon thread;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Changes the name of this thread to be equal to the argument "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text", :content ".\n\nFirst the "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text",
   :content
   " method of this thread is called\nwith no arguments. This may result in throwing a\n"}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Changes the name of this thread to be equal to the argument "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text", :content "."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the new name for this thread.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot modify this\nthread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Performs reflective checks on given subclass to verify that it doesn't\noverride security-sensitive non-final methods.  Returns true if the\nsubclass overrides any of the methods, false otherwise."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Performs reflective checks on given subclass to verify that it doesn't\noverride security-sensitive non-final methods."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Forces the thread to stop executing.\n\nIf there is a security manager installed, its "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text", :content "\nmethod is called with "}
  {:type "html", :content "<pre>this</pre> "}
  {:type "text", :content "\nas its argument. This may result in a\n"}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text",
   :content
   " being raised (in the current thread).\n\nIf this thread is different from the current thread (that is, the current\nthread is trying to stop a thread other than itself), the\nsecurity manager's "}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text", :content " method (with a\n"}
  {:type "html",
   :content "<pre>RuntimePermission(\"stopThread\")</pre> "}
  {:type "text",
   :content
   " argument) is called in\naddition.\nAgain, this may result in throwing a\n"}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text",
   :content
   " (in the current thread).\n\nThe thread represented by this thread is forced to stop whatever\nit is doing abnormally and to throw a newly created\n"}
  {:type "html", :content "<pre>ThreadDeath</pre> "}
  {:type "text",
   :content
   " object as an exception.\n\nIt is permitted to stop a thread that has not yet been started.\nIf the thread is eventually started, it immediately terminates.\n\nAn application should not normally try to catch\n"}
  {:type "html", :content "<pre>ThreadDeath</pre> "}
  {:type "text",
   :content
   " unless it must do some extraordinary\ncleanup operation (note that the throwing of\n"}
  {:type "html", :content "<pre>ThreadDeath</pre> "}
  {:type "text", :content " causes "}
  {:type "html", :content "<pre>finally</pre> "}
  {:type "text", :content " clauses of\n"}
  {:type "html", :content "<pre>try</pre> "}
  {:type "text",
   :content
   " statements to be executed before the thread\nofficially dies).  If a "}
  {:type "html", :content "<pre>catch</pre> "}
  {:type "text", :content " clause catches a\n"}
  {:type "html", :content "<pre>ThreadDeath</pre> "}
  {:type "text",
   :content
   " object, it is important to rethrow the\nobject so that the thread actually dies.\n\nThe top-level error handler that reacts to otherwise uncaught\nexceptions does not print out a message or otherwise notify the\napplication if the uncaught exception is an instance of\n"}
  {:type "html", :content "<pre>ThreadDeath</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Forces the thread to stop executing."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot\nmodify this thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Verifies that this (possibly subclass) instance can be constructed\nwithout violating security constraints: the subclass must not override\nsecurity-sensitive non-final methods, or else the\n\"enableContextClassLoaderOverride\" RuntimePermission is checked."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Verifies that this (possibly subclass) instance can be constructed\nwithout violating security constraints: the subclass must not override\nsecurity-sensitive non-final methods, or else the\n\"enableContextClassLoaderOverride\" RuntimePermission is checked."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the identifier of this Thread.  The thread ID is a positive\n"}
  {:type "html", :content "<pre>long</pre> "}
  {:type "text",
   :content
   " number generated when this thread was created.\nThe thread ID is unique and remains unchanged during its lifetime.\nWhen a thread is terminated, this thread ID may be reused."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns the identifier of this Thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "this thread's ID."}]}

{:doc-fragments
 [{:type "text",
   :content
   "The argument supplied to the current call to\njava.util.concurrent.locks.LockSupport.park.\nSet by (private) java.util.concurrent.locks.LockSupport.setBlocker\nAccessed using java.util.concurrent.locks.LockSupport.getBlocker"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "The argument supplied to the current call to\njava.util.concurrent.locks.LockSupport.park."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the thread group to which this thread belongs.\nThis method returns null if this thread has died\n(been stopped)."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns the thread group to which this thread belongs."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "this thread's thread group."}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nand belongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content ", and has\nthe specified "}
  {:type "html", :content "<i> stack size </i>"}
  {:type "text", :content ".\n\nThis constructor is identical to "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text",
   :content
   " with the exception of the fact\nthat it allows the thread stack size to be specified.  The stack size\nis the approximate number of bytes of address space that the virtual\nmachine is to allocate for this thread's stack. "}
  {:type "html",
   :content
   "<b> The effect of the\n  <pre>stackSize</pre>   parameter, if any, is highly platform dependent. </b>"}
  {:type "text",
   :content
   "\n\nOn some platforms, specifying a higher value for the\n"}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text",
   :content
   " parameter may allow a thread to achieve greater\nrecursion depth before throwing a "}
  {:type "html", :content "<pre>StackOverflowError</pre> "}
  {:type "text",
   :content
   ".\nSimilarly, specifying a lower value may allow a greater number of\nthreads to exist concurrently without throwing an "}
  {:type "html", :content "<pre>OutOfMemoryError</pre> "}
  {:type "text",
   :content
   " (or other internal error).  The details of\nthe relationship between the value of the "}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text",
   :content
   " parameter\nand the maximum recursion depth and concurrency level are\nplatform-dependent. "}
  {:type "html",
   :content
   "<b> On some platforms, the value of the\n  <pre>stackSize</pre>   parameter may have no effect whatsoever. </b>"}
  {:type "text",
   :content "\n\nThe virtual machine is free to treat the "}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text",
   :content
   "\nparameter as a suggestion.  If the specified value is unreasonably low\nfor the platform, the virtual machine may instead use some\nplatform-specific minimum value; if the specified value is unreasonably\nhigh, the virtual machine may instead use some platform-specific\nmaximum.  Likewise, the virtual machine is free to round the specified\nvalue up or down as it sees fit (or to ignore it completely).\n\nSpecifying a value of zero for the "}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text",
   :content
   " parameter will\ncause this constructor to behave exactly like the\n"}
  {:type "html",
   :content "<pre>Thread(ThreadGroup, Runnable, String)</pre> "}
  {:type "text", :content " constructor.\n\n"}
  {:type "html",
   :content
   "<i> Due to the platform-dependent nature of the behavior of this\n constructor, extreme care should be exercised in its use.\n The thread stack size necessary to perform a given computation will\n likely vary from one JRE implementation to another.  In light of this\n variation, careful tuning of the stack size parameter may be required,\n and the tuning may need to be repeated for each JRE implementation on\n which an application is to run. </i>"}
  {:type "text",
   :content
   "\n\nImplementation note: Java platform implementers are encouraged to\ndocument their implementation's behavior with respect to the\n"}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text", :content " parameter."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nand belongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content ", and has\nthe specified "}
  {:type "html", :content "<i> stack size </i>"}
  {:type "text", :content "."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>group</pre>:&nbsp;"}
  {:type "text", :content "the thread group. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and there is a security\nmanager, the group is determined by "}
  {:type "html", :content "<pre>SecurityManager#getThreadGroup</pre> "}
  {:type "text", :content ".\nIf there is not a security manager or "}
  {:type "html",
   :content "<pre>\n         SecurityManager.getThreadGroup()</pre> "}
  {:type "text", :content " returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ", the group\nis set to the current thread's thread group.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this thread's run method is invoked.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>stackSize</pre>:&nbsp;"}
  {:type "text",
   :content
   "the desired stack size for the new thread, or zero to indicate\nthat this parameter is to be ignored.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot create a thread in the specified\nthread group"}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(null, target, gname)</pre> "}
  {:type "text", :content ", where "}
  {:type "html", :content "<pre>gname</pre> "}
  {:type "text",
   :content
   " is a newly generated\nname. Automatically generated names are of the form\n"}
  {:type "html", :content "<pre>\"Thread-\"+</pre>  <i> n </i>"}
  {:type "text", :content ", where "}
  {:type "html", :content "<i> n </i>"}
  {:type "text", :content " is an integer."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this classes "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text", :content " method does\nnothing."}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(group, null, name)</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>group</pre>:&nbsp;"}
  {:type "text", :content "the thread group. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and there is a security\nmanager, the group is determined by "}
  {:type "html", :content "<pre>SecurityManager#getThreadGroup</pre> "}
  {:type "text", :content ".\nIf there is not a security manager or "}
  {:type "html",
   :content "<pre>\n         SecurityManager.getThreadGroup()</pre> "}
  {:type "text", :content " returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ", the group\nis set to the current thread's thread group.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot create a thread in the specified\nthread group"}]}

{:doc-fragments [{:type "text", :content "Initializes a Thread."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Initializes a Thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>g</pre>:&nbsp;"}
  {:type "text", :content "the Thread group\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text",
   :content "the object whose run() method gets called\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new Thread\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>stackSize</pre>:&nbsp;"}
  {:type "text",
   :content
   "the desired stack size for the new thread, or\nzero to indicate that this parameter is to be ignored.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>acc</pre>:&nbsp;"}
  {:type "text",
   :content
   "the AccessControlContext to inherit, or\nAccessController.getContext() if null\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>inheritThreadLocals</pre>:&nbsp;"}
  {:type "text", :content "if "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", inherit initial values for\ninheritable thread-locals from the constructing thread"}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(group, target, gname)</pre> "}
  {:type "text", :content ",where "}
  {:type "html", :content "<pre>gname</pre> "}
  {:type "text",
   :content
   " is a newly generated\nname. Automatically generated names are of the form\n"}
  {:type "html", :content "<pre>\"Thread-\"+</pre>  <i> n </i>"}
  {:type "text", :content ", where "}
  {:type "html", :content "<i> n </i>"}
  {:type "text", :content " is an integer."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>group</pre>:&nbsp;"}
  {:type "text", :content "the thread group. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and there is a security\nmanager, the group is determined by "}
  {:type "html", :content "<pre>SecurityManager#getThreadGroup</pre> "}
  {:type "text", :content ".\nIf there is not a security manager or "}
  {:type "html",
   :content "<pre>\n         SecurityManager.getThreadGroup()</pre> "}
  {:type "text", :content " returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ", the group\nis set to the current thread's thread group.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this thread's run method is invoked.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot create a thread in the specified\nthread group"}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nand belongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content ".\n\nIf there is a security manager, its\n"}
  {:type "html",
   :content "<pre>SecurityManager#checkAccess(ThreadGroup)</pre> "}
  {:type "text",
   :content
   "\nmethod is invoked with the ThreadGroup as its argument.\n\nIn addition, its "}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text", :content " method is invoked with\nthe "}
  {:type "html",
   :content
   "<pre>RuntimePermission(\"enableContextClassLoaderOverride\")</pre> "}
  {:type "text",
   :content
   "\npermission when invoked directly or indirectly by the constructor\nof a subclass which overrides the "}
  {:type "html", :content "<pre>getContextClassLoader</pre> "}
  {:type "text", :content "\nor "}
  {:type "html", :content "<pre>setContextClassLoader</pre> "}
  {:type "text",
   :content
   " methods.\n\nThe priority of the newly created thread is set equal to the\npriority of the thread creating it, that is, the currently running\nthread. The method "}
  {:type "html", :content "<pre>#setPriority</pre> "}
  {:type "text",
   :content
   " may be\nused to change the priority to a new value.\n\nThe newly created thread is initially marked as being a daemon\nthread if and only if the thread creating it is currently marked\nas a daemon thread. The method "}
  {:type "html", :content "<pre>#setDaemon</pre> "}
  {:type "text",
   :content
   "\nmay be used to change whether or not a thread is a daemon."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nand belongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content "."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>group</pre>:&nbsp;"}
  {:type "text", :content "the thread group. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and there is a security\nmanager, the group is determined by "}
  {:type "html", :content "<pre>SecurityManager#getThreadGroup</pre> "}
  {:type "text", :content ".\nIf there is not a security manager or "}
  {:type "html",
   :content "<pre>\n         SecurityManager.getThreadGroup()</pre> "}
  {:type "text", :content " returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ", the group\nis set to the current thread's thread group.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this thread's run method is invoked.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot create a thread in the specified\nthread group or cannot override the context class loader methods."}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(null, target, name)</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this thread's run method is invoked.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread"}]}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(null, null, gname)</pre> "}
  {:type "text", :content ", where "}
  {:type "html", :content "<pre>gname</pre> "}
  {:type "text",
   :content
   " is a newly generated\nname. Automatically generated names are of the form\n"}
  {:type "html", :content "<pre>\"Thread-\"+</pre>  <i> n </i>"}
  {:type "text", :content ", where "}
  {:type "html", :content "<i> n </i>"}
  {:type "text", :content " is an integer."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content " object. This constructor has the same\neffect as "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String)</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<pre>(null, null, name)</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Creates a new Thread that inherits the given AccessControlContext\nbut thread-local variables are not inherited.\nThis is not a public constructor."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Creates a new Thread that inherits the given AccessControlContext\nbut thread-local variables are not inherited."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nbelongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content ", has\nthe specified "}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text", :content ", and inherits initial values for\n"}
  {:type "html", :content "<pre>InheritableThreadLocal</pre> "}
  {:type "text", :content " variables\nif "}
  {:type "html", :content "<pre>inheritThreadLocals</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content ".\n\nThis constructor is identical to "}
  {:type "html",
   :content "<pre>#Thread(ThreadGroup,Runnable,String,long)</pre> "}
  {:type "text",
   :content
   " with the added ability to\nsuppress, or not, the inheriting of initial values for inheritable\nthread-local variables from the constructing thread. This allows for\nfiner grain control over inheritable thread-locals. Care must be taken\nwhen passing a value of "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " for "}
  {:type "html", :content "<pre>inheritThreadLocals</pre> "}
  {:type "text",
   :content
   ",\nas it may lead to unexpected behavior if the new thread executes code\nthat expects a specific thread-local value to be inherited.\n\nSpecifying a value of "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content " for the "}
  {:type "html", :content "<pre>inheritThreadLocals</pre> "}
  {:type "text",
   :content
   "\nparameter will cause this constructor to behave exactly like the\n"}
  {:type "html",
   :content "<pre>Thread(ThreadGroup, Runnable, String, long)</pre> "}
  {:type "text", :content " constructor."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Allocates a new "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " object so that it has "}
  {:type "html", :content "<pre>target</pre> "}
  {:type "text", :content "\nas its run object, has the specified "}
  {:type "html", :content "<pre>name</pre> "}
  {:type "text",
   :content
   " as its name,\nbelongs to the thread group referred to by "}
  {:type "html", :content "<pre>group</pre> "}
  {:type "text", :content ", has\nthe specified "}
  {:type "html", :content "<pre>stackSize</pre> "}
  {:type "text", :content ", and inherits initial values for\n"}
  {:type "html", :content "<pre>InheritableThreadLocal</pre> "}
  {:type "text", :content " variables\nif "}
  {:type "html", :content "<pre>inheritThreadLocals</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content "."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>group</pre>:&nbsp;"}
  {:type "text", :content "the thread group. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and there is a security\nmanager, the group is determined by "}
  {:type "html", :content "<pre>SecurityManager#getThreadGroup</pre> "}
  {:type "text", :content ".\nIf there is not a security manager or "}
  {:type "html",
   :content "<pre>\n         SecurityManager.getThreadGroup()</pre> "}
  {:type "text", :content " returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ", the group\nis set to the current thread's thread group.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>target</pre>:&nbsp;"}
  {:type "text", :content "the object whose "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content " method is invoked when this thread\nis started. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", this thread's run method is invoked.\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>name</pre>:&nbsp;"}
  {:type "text", :content "the name of the new thread\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>stackSize</pre>:&nbsp;"}
  {:type "text",
   :content
   "the desired stack size for the new thread, or zero to indicate\nthat this parameter is to be ignored\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>inheritThreadLocals</pre>:&nbsp;"}
  {:type "text", :content "if "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", inherit initial values for inheritable\nthread-locals from the constructing thread, otherwise no initial\nvalues are inherited\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread cannot create a thread in the specified\nthread group"}]}

{:doc-fragments
 [{:type "text", :content "Suspends this thread.\n\nFirst, the "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text",
   :content
   " method of this thread is called\nwith no arguments. This may result in throwing a\n"}
  {:type "html", :content "<pre>SecurityException </pre> "}
  {:type "text",
   :content
   "(in the current thread).\n\nIf the thread is alive, it is suspended and makes no further\nprogress unless and until it is resumed."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Suspends this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot modify\nthis thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Determines if the currently running thread has permission to\nmodify this thread.\n\nIf there is a security manager, its "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text",
   :content
   " method\nis called with this thread as its argument. This may result in\nthrowing a "}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Determines if the currently running thread has permission to\nmodify this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread is not allowed to\naccess this thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an estimate of the number of active threads in the current\nthread's "}
  {:type "html", :content "<pre>java.lang.ThreadGroup</pre> "}
  {:type "text",
   :content
   " and its\nsubgroups. Recursively iterates over all subgroups in the current\nthread's thread group.\n\nThe value returned is only an estimate because the number of\nthreads may change dynamically while this method traverses internal\ndata structures, and might be affected by the presence of certain\nsystem threads. This method is intended primarily for debugging\nand monitoring purposes."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an estimate of the number of active threads in the current\nthread's "}
  {:type "html", :content "<pre>java.lang.ThreadGroup</pre> "}
  {:type "text", :content " and its\nsubgroups."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "an estimate of the number of active threads in the current\nthread's thread group and in any other thread group that\nhas the current thread's thread group as an ancestor"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns a string representation of this thread, including the\nthread's name, priority, and thread group."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns a string representation of this thread, including the\nthread's name, priority, and thread group."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "a string representation of this thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Removes from the specified map any keys that have been enqueued\non the specified reference queue."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Removes from the specified map any keys that have been enqueued\non the specified reference queue."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text", :content "Returns this thread's priority."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns this thread's priority."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "this thread's priority."}]}

{:doc-fragments
 [{:type "text", :content "The current seed for a ThreadLocalRandom"}],
 :doc-first-sentence-fragments
 [{:type "text", :content "The current seed for a ThreadLocalRandom"}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content "Tests whether this thread has been interrupted.  The "}
  {:type "html", :content "<i> interrupted\n status </i>"}
  {:type "text",
   :content " of the thread is unaffected by this method."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Tests whether this thread has been interrupted."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if this thread has been interrupted;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise."}]}

{:doc-fragments
 [{:type "text", :content "Returns the context "}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text", :content " for this thread. The context\n"}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text",
   :content
   " is provided by the creator of the thread for use\nby code running in this thread when loading classes and resources.\nIf not "}
  {:type "html", :content "<pre>#setContextClassLoader</pre> "}
  {:type "text", :content ", the default is the\n"}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text",
   :content " context of the parent thread. The context\n"}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text",
   :content
   " of the\nprimordial thread is typically set to the class loader used to load the\napplication."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns the context "}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text", :content " for this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "the context "}
  {:type "html", :content "<pre>ClassLoader</pre> "}
  {:type "text", :content " for this thread, or "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   "\nindicating the system class loader (or, failing that, the\nbootstrap class loader)\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if a security manager is present, and the caller's class loader\nis not "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and is not the same as or an ancestor of the\ncontext class loader, and the caller does not have the\n"}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>(\"getClassLoader\")</pre> "}]}

{:doc-fragments
 [{:type "text", :content "Returns "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the current thread holds the\nmonitor lock on the specified object.\n\nThis method is designed to allow a program to assert that\nthe current thread already holds a specified lock:\n"}
  {:type "html",
   :content "<pre> \n     assert Thread.holdsLock(obj);\n  </pre>"}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the current thread holds the\nmonitor lock on the specified object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>obj</pre>:&nbsp;"}
  {:type "text",
   :content "the object on which to test lock ownership\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "if obj is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if the current thread holds the monitor lock on\nthe specified object."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Causes this thread to begin execution; the Java Virtual Machine\ncalls the "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content
   " method of this thread.\n\nThe result is that two threads are running concurrently: the\ncurrent thread (which returns from the call to the\n"}
  {:type "html", :content "<pre>start</pre> "}
  {:type "text",
   :content " method) and the other thread (which executes its\n"}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content
   " method).\n\nIt is never legal to start a thread more than once.\nIn particular, a thread may not be restarted once it has completed\nexecution."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Causes this thread to begin execution; the Java Virtual Machine\ncalls the "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text", :content " method of this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalThreadStateException</pre>:&nbsp;"}
  {:type "text", :content "if the thread was already started."}]}

{:doc-fragments
 [{:type "text", :content "Marks this thread as either a "}
  {:type "html", :content "<pre>#isDaemon</pre> "}
  {:type "text",
   :content
   " thread\nor a user thread. The Java Virtual Machine exits when the only\nthreads running are all daemon threads.\n\nThis method must be invoked before the thread is started."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Marks this thread as either a "}
  {:type "html", :content "<pre>#isDaemon</pre> "}
  {:type "text", :content " thread\nor a user thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>on</pre>:&nbsp;"}
  {:type "text", :content "if "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content ", marks this thread as a daemon thread\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalThreadStateException</pre>:&nbsp;"}
  {:type "text", :content "if this thread is "}
  {:type "html", :content "<pre>#isAlive</pre> "}
  {:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "if "}
  {:type "html", :content "<pre>#checkAccess</pre> "}
  {:type "text",
   :content
   " determines that the current\nthread cannot modify this thread"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Prints a stack trace of the current thread to the standard error stream.\nThis method is used only for debugging."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Prints a stack trace of the current thread to the standard error stream."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Set the handler invoked when this thread abruptly terminates\ndue to an uncaught exception.\n\nA thread can take full control of how it responds to uncaught\nexceptions by having its uncaught exception handler explicitly set.\nIf no such handler is set then the thread's "}
  {:type "html", :content "<pre>ThreadGroup</pre> "}
  {:type "text", :content "\nobject acts as its handler."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Set the handler invoked when this thread abruptly terminates\ndue to an uncaught exception."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>eh</pre>:&nbsp;"}
  {:type "text",
   :content
   "the object to use as this thread's uncaught exception\nhandler. If "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content " then this thread has no explicit handler.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "if the current thread is not allowed to\nmodify this thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns a map of stack traces for all live threads.\nThe map keys are threads and each map value is an array of\n"}
  {:type "html", :content "<pre>StackTraceElement</pre> "}
  {:type "text",
   :content " that represents the stack dump\nof the corresponding "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text",
   :content
   ".\nThe returned stack traces are in the format specified for\nthe "}
  {:type "html", :content "<pre>#getStackTrace</pre> "}
  {:type "text",
   :content
   " method.\n\nThe threads may be executing while this method is called.\nThe stack trace of each thread only represents a snapshot and\neach stack trace may be obtained at different time.  A zero-length\narray will be returned in the map value if the virtual machine has\nno stack trace information about a thread.\n\nIf there is a security manager, then the security manager's\n"}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text", :content " method is called with a\n"}
  {:type "html",
   :content "<pre>RuntimePermission(\"getStackTrace\")</pre> "}
  {:type "text", :content " permission as well as\n"}
  {:type "html",
   :content "<pre>RuntimePermission(\"modifyThreadGroup\")</pre> "}
  {:type "text",
   :content
   " permission\nto see if it is ok to get the stack trace of all threads."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns a map of stack traces for all live threads."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "a "}
  {:type "html", :content "<pre>Map</pre> "}
  {:type "text", :content " from "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " to an array of\n"}
  {:type "html", :content "<pre>StackTraceElement</pre> "}
  {:type "text",
   :content
   " that represents the stack trace of\nthe corresponding thread.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "if a security manager exists and its\n"}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text",
   :content
   " method doesn't allow\ngetting the stack trace of thread."}]}

{:doc-fragments
 [{:type "text", :content "Throws "}
  {:type "html", :content "<pre>UnsupportedOperationException</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Throws "}
  {:type "html", :content "<pre>UnsupportedOperationException</pre> "}
  {:type "text", :content "."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "nothing"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the handler invoked when this thread abruptly terminates\ndue to an uncaught exception. If this thread has not had an\nuncaught exception handler explicitly set then this thread's\n"}
  {:type "html", :content "<pre>ThreadGroup</pre> "}
  {:type "text",
   :content
   " object is returned, unless this thread\nhas terminated, in which case "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " is returned."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the handler invoked when this thread abruptly terminates\ndue to an uncaught exception."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "the uncaught exception handler for this thread"}]}

{:doc-fragments
 [{:type "text",
   :content "Changes the priority of this thread.\n\nFirst the "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text",
   :content
   " method of this thread is called\nwith no arguments. This may result in throwing a "}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text",
   :content
   ".\n\nOtherwise, the priority of this thread is set to the smaller of\nthe specified "}
  {:type "html", :content "<pre>newPriority</pre> "}
  {:type "text",
   :content
   " and the maximum permitted\npriority of the thread's thread group."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Changes the priority of this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>newPriority</pre>:&nbsp;"}
  {:type "text", :content "priority to set this thread to\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "If the priority is not in the\nrange "}
  {:type "html", :content "<pre>MIN_PRIORITY</pre> "}
  {:type "text", :content " to\n"}
  {:type "html", :content "<pre>MAX_PRIORITY</pre> "}
  {:type "text", :content ".\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot modify\nthis thread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "This method is called by the system to give a Thread\na chance to clean up before it actually exits."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "This method is called by the system to give a Thread\na chance to clean up before it actually exits."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content "If this thread was constructed using a separate\n"}
  {:type "html", :content "<pre>Runnable</pre> "}
  {:type "text", :content " run object, then that\n"}
  {:type "html", :content "<pre>Runnable</pre> "}
  {:type "text", :content " object's "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content
   " method is called;\notherwise, this method does nothing and returns.\n\nSubclasses of "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " should override this method."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "If this thread was constructed using a separate\n"}
  {:type "html", :content "<pre>Runnable</pre> "}
  {:type "text", :content " run object, then that\n"}
  {:type "html", :content "<pre>Runnable</pre> "}
  {:type "text", :content " object's "}
  {:type "html", :content "<pre>run</pre> "}
  {:type "text",
   :content
   " method is called;\notherwise, this method does nothing and returns."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Secondary seed isolated from public ThreadLocalRandom sequence"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Secondary seed isolated from public ThreadLocalRandom sequence"}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content "The default priority that is assigned to a thread."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The default priority that is assigned to a thread."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Probe hash value; nonzero if threadLocalRandomSeed initialized"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Probe hash value; nonzero if threadLocalRandomSeed initialized"}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "A hint to the scheduler that the current thread is willing to yield\nits current use of a processor. The scheduler is free to ignore this\nhint.\n\nYield is a heuristic attempt to improve relative progression\nbetween threads that would otherwise over-utilise a CPU. Its use\nshould be combined with detailed profiling and benchmarking to\nensure that it actually has the desired effect.\n\nIt is rarely appropriate to use this method. It may be useful\nfor debugging or testing purposes, where it may help to reproduce\nbugs due to race conditions. It may also be useful when designing\nconcurrency control constructs such as the ones in the\n"}
  {:type "html", :content "<pre>java.util.concurrent.locks</pre> "}
  {:type "text", :content " package."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "A hint to the scheduler that the current thread is willing to yield\nits current use of a processor."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the default handler invoked when a thread abruptly terminates\ndue to an uncaught exception. If the returned value is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ",\nthere is no default."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the default handler invoked when a thread abruptly terminates\ndue to an uncaught exception."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "the default uncaught exception handler for all threads"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the state of this thread.\nThis method is designed for use in monitoring of the system state,\nnot for synchronization control."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns the state of this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "this thread's state."}]}

{:doc-fragments
 [{:type "text",
   :content "The minimum priority that a thread can have."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The minimum priority that a thread can have."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Dispatch an uncaught exception to the handler. This method is\nintended to be called only by the JVM."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Dispatch an uncaught exception to the handler."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text", :content "Returns this thread's name."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns this thread's name."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "this thread's name."}]}

{:doc-fragments
 [{:type "text",
   :content "The maximum priority that a thread can have."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The maximum priority that a thread can have."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Indicates that the caller is momentarily unable to progress, until the\noccurrence of one or more actions on the part of other activities. By\ninvoking this method within each iteration of a spin-wait loop construct,\nthe calling thread indicates to the runtime that it is busy-waiting.\nThe runtime may take action to improve the performance of invoking\nspin-wait loop constructions."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Indicates that the caller is momentarily unable to progress, until the\noccurrence of one or more actions on the part of other activities."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Waits for this thread to die.\n\nAn invocation of this method behaves in exactly the same\nway as the invocation\n\n"}
  {:type "html",
   :content
   "<blockquote> \n  <pre>#join(long)</pre>  <pre>(0)</pre>  \n  </blockquote>"}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Waits for this thread to die."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>InterruptedException</pre>:&nbsp;"}
  {:type "text",
   :content "if any thread has interrupted the current thread. The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the current thread is\ncleared when this exception is thrown."}]}

{:doc-fragments
 [{:type "text", :content "Waits at most "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " milliseconds plus\n"}
  {:type "html", :content "<pre>nanos</pre> "}
  {:type "text",
   :content
   " nanoseconds for this thread to die.\nIf both arguments are "}
  {:type "html", :content "<pre>0</pre> "}
  {:type "text",
   :content
   ", it means to wait forever.\n\nThis implementation uses a loop of "}
  {:type "html", :content "<pre>this.wait</pre> "}
  {:type "text", :content " calls\nconditioned on "}
  {:type "html", :content "<pre>this.isAlive</pre> "}
  {:type "text", :content ". As a thread terminates the\n"}
  {:type "html", :content "<pre>this.notifyAll</pre> "}
  {:type "text",
   :content
   " method is invoked. It is recommended that\napplications not use "}
  {:type "html", :content "<pre>wait</pre> "}
  {:type "text", :content ", "}
  {:type "html", :content "<pre>notify</pre> "}
  {:type "text", :content ", or\n"}
  {:type "html", :content "<pre>notifyAll</pre> "}
  {:type "text", :content " on "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " instances."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Waits at most "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " milliseconds plus\n"}
  {:type "html", :content "<pre>nanos</pre> "}
  {:type "text", :content " nanoseconds for this thread to die."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>millis</pre>:&nbsp;"}
  {:type "text", :content "the time to wait in milliseconds\n\n"}
  {:type "html",
   :content
   "<i>Param</i>&nbsp;<pre>nanos</pre>:&nbsp; <pre>0-999999</pre> "}
  {:type "text", :content " additional nanoseconds to wait\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "if the value of "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " is negative, or the value\nof "}
  {:type "html", :content "<pre>nanos</pre> "}
  {:type "text", :content " is not in the range "}
  {:type "html", :content "<pre>0-999999</pre> "}
  {:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>InterruptedException</pre>:&nbsp;"}
  {:type "text",
   :content "if any thread has interrupted the current thread. The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the current thread is\ncleared when this exception is thrown."}]}

{:doc-fragments
 [{:type "text", :content "Waits at most "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text",
   :content " milliseconds for this thread to\ndie. A timeout of "}
  {:type "html", :content "<pre>0</pre> "}
  {:type "text",
   :content
   " means to wait forever.\n\nThis implementation uses a loop of "}
  {:type "html", :content "<pre>this.wait</pre> "}
  {:type "text", :content " calls\nconditioned on "}
  {:type "html", :content "<pre>this.isAlive</pre> "}
  {:type "text", :content ". As a thread terminates the\n"}
  {:type "html", :content "<pre>this.notifyAll</pre> "}
  {:type "text",
   :content
   " method is invoked. It is recommended that\napplications not use "}
  {:type "html", :content "<pre>wait</pre> "}
  {:type "text", :content ", "}
  {:type "html", :content "<pre>notify</pre> "}
  {:type "text", :content ", or\n"}
  {:type "html", :content "<pre>notifyAll</pre> "}
  {:type "text", :content " on "}
  {:type "html", :content "<pre>Thread</pre> "}
  {:type "text", :content " instances."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Waits at most "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " milliseconds for this thread to\ndie."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>millis</pre>:&nbsp;"}
  {:type "text", :content "the time to wait in milliseconds\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "if the value of "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " is negative\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>InterruptedException</pre>:&nbsp;"}
  {:type "text",
   :content "if any thread has interrupted the current thread. The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the current thread is\ncleared when this exception is thrown."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Causes the currently executing thread to sleep (temporarily cease\nexecution) for the specified number of milliseconds plus the specified\nnumber of nanoseconds, subject to the precision and accuracy of system\ntimers and schedulers. The thread does not lose ownership of any\nmonitors."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Causes the currently executing thread to sleep (temporarily cease\nexecution) for the specified number of milliseconds plus the specified\nnumber of nanoseconds, subject to the precision and accuracy of system\ntimers and schedulers."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>millis</pre>:&nbsp;"}
  {:type "text",
   :content "the length of time to sleep in milliseconds\n\n"}
  {:type "html",
   :content
   "<i>Param</i>&nbsp;<pre>nanos</pre>:&nbsp; <pre>0-999999</pre> "}
  {:type "text", :content " additional nanoseconds to sleep\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "if the value of "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " is negative, or the value of\n"}
  {:type "html", :content "<pre>nanos</pre> "}
  {:type "text", :content " is not in the range "}
  {:type "html", :content "<pre>0-999999</pre> "}
  {:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>InterruptedException</pre>:&nbsp;"}
  {:type "text",
   :content "if any thread has interrupted the current thread. The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the current thread is\ncleared when this exception is thrown."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Causes the currently executing thread to sleep (temporarily cease\nexecution) for the specified number of milliseconds, subject to\nthe precision and accuracy of system timers and schedulers. The thread\ndoes not lose ownership of any monitors."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Causes the currently executing thread to sleep (temporarily cease\nexecution) for the specified number of milliseconds, subject to\nthe precision and accuracy of system timers and schedulers."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>millis</pre>:&nbsp;"}
  {:type "text",
   :content "the length of time to sleep in milliseconds\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "if the value of "}
  {:type "html", :content "<pre>millis</pre> "}
  {:type "text", :content " is negative\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>InterruptedException</pre>:&nbsp;"}
  {:type "text",
   :content "if any thread has interrupted the current thread. The\n"}
  {:type "html", :content "<i> interrupted status </i>"}
  {:type "text",
   :content
   " of the current thread is\ncleared when this exception is thrown."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of stack trace elements representing the stack dump\nof this thread.  This method will return a zero-length array if\nthis thread has not started, has started but has not yet been\nscheduled to run by the system, or has terminated.\nIf the returned array is of non-zero length then the first element of\nthe array represents the top of the stack, which is the most recent\nmethod invocation in the sequence.  The last element of the array\nrepresents the bottom of the stack, which is the least recent method\ninvocation in the sequence.\n\nIf there is a security manager, and this thread is not\nthe current thread, then the security manager's\n"}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text", :content " method is called with a\n"}
  {:type "html",
   :content "<pre>RuntimePermission(\"getStackTrace\")</pre> "}
  {:type "text",
   :content
   " permission\nto see if it's ok to get the stack trace.\n\nSome virtual machines may, under some circumstances, omit one\nor more stack frames from the stack trace.  In the extreme case,\na virtual machine that has no stack trace information concerning\nthis thread is permitted to return a zero-length array from this\nmethod."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of stack trace elements representing the stack dump\nof this thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "an array of "}
  {:type "html", :content "<pre>StackTraceElement</pre> "}
  {:type "text", :content ",\neach represents one stack frame.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "if a security manager exists and its\n"}
  {:type "html", :content "<pre>checkPermission</pre> "}
  {:type "text",
   :content
   " method doesn't allow\ngetting the stack trace of thread."}]}

{:doc-fragments
 [{:type "text", :content "Resumes a suspended thread.\n\nFirst, the "}
  {:type "html", :content "<pre>checkAccess</pre> "}
  {:type "text",
   :content
   " method of this thread is called\nwith no arguments. This may result in throwing a\n"}
  {:type "html", :content "<pre>SecurityException</pre> "}
  {:type "text",
   :content
   " (in the current thread).\n\nIf the thread is alive but suspended, it is resumed and is\npermitted to make progress in its execution."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Resumes a suspended thread."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "if the current thread cannot modify this\nthread."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Copies into the specified array every active thread in the current\nthread's thread group and its subgroups. This method simply\ninvokes the "}
  {:type "html",
   :content "<pre>java.lang.ThreadGroup#enumerate(Thread[])</pre> "}
  {:type "text",
   :content
   "\nmethod of the current thread's thread group.\n\nAn application might use the "}
  {:type "html", :content "<pre>#activeCount</pre> "}
  {:type "text",
   :content
   "\nmethod to get an estimate of how big the array should be, however\n"}
  {:type "html",
   :content
   "<i> if the array is too short to hold all the threads, the extra threads\n are silently ignored. </i>"}
  {:type "text",
   :content
   " If it is critical to obtain every active\nthread in the current thread's thread group and its subgroups, the\ninvoker should verify that the returned int value is strictly less\nthan the length of "}
  {:type "html", :content "<pre>tarray</pre> "}
  {:type "text",
   :content
   ".\n\nDue to the inherent race condition in this method, it is recommended\nthat the method only be used for debugging and monitoring purposes."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Copies into the specified array every active thread in the current\nthread's thread group and its subgroups."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>tarray</pre>:&nbsp;"}
  {:type "text",
   :content "an array into which to put the list of threads\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "the number of threads put into the array\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "if "}
  {:type "html",
   :content "<pre>java.lang.ThreadGroup#checkAccess</pre> "}
  {:type "text",
   :content
   " determines that\nthe current thread cannot access its thread group"}]}

]