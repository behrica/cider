[{:doc-fragments
 [{:type "text",
   :content
   "An abstract representation of file and directory pathnames.\n\nUser interfaces and operating systems use system-dependent "}
  {:type "html", :content "<em> pathname\n strings </em>"}
  {:type "text",
   :content
   " to name files and directories.  This class presents an\nabstract, system-independent view of hierarchical pathnames.  An\n"}
  {:type "html", :content "<em> abstract pathname </em>"}
  {:type "text", :content " has two components:\n\n"}
  {:type "html",
   :content
   "<ol> \n  <li>  An optional system-dependent  <em> prefix </em>  string,\n      such as a disk-drive specifier,  <pre>\"/\"</pre>  &nbsp; for the UNIX root\n      directory, or  <pre>\"\\\\\\\\\"</pre>  &nbsp; for a Microsoft Windows UNC pathname, and\n  <li>  A sequence of zero or more string  <em> names </em> .\n  </ol>"}
  {:type "text",
   :content
   "\n\nThe first name in an abstract pathname may be a directory name or, in the\ncase of Microsoft Windows UNC pathnames, a hostname.  Each subsequent name\nin an abstract pathname denotes a directory; the last name may denote\neither a directory or a file.  The "}
  {:type "html", :content "<em> empty </em>"}
  {:type "text",
   :content
   " abstract pathname has no\nprefix and an empty name sequence.\n\nThe conversion of a pathname string to or from an abstract pathname is\ninherently system-dependent.  When an abstract pathname is converted into a\npathname string, each name is separated from the next by a single copy of\nthe default "}
  {:type "html", :content "<em> separator character </em>"}
  {:type "text",
   :content
   ".  The default name-separator\ncharacter is defined by the system property "}
  {:type "html", :content "<pre>file.separator</pre> "}
  {:type "text",
   :content ", and\nis made available in the public static fields "}
  {:type "html", :content "<pre>#separator</pre> "}
  {:type "text", :content " and "}
  {:type "html", :content "<pre>#separatorChar</pre> "}
  {:type "text",
   :content
   " of this class.\nWhen a pathname string is converted into an abstract pathname, the names\nwithin it may be separated by the default name-separator character or by any\nother name-separator character that is supported by the underlying system.\n\nA pathname, whether abstract or in string form, may be either\n"}
  {:type "html", :content "<em> absolute </em>"}
  {:type "text", :content " or "}
  {:type "html", :content "<em> relative </em>"}
  {:type "text",
   :content
   ".  An absolute pathname is complete in\nthat no other information is required in order to locate the file that it\ndenotes.  A relative pathname, in contrast, must be interpreted in terms of\ninformation taken from some other pathname.  By default the classes in the\n"}
  {:type "html", :content "<pre>java.io</pre> "}
  {:type "text",
   :content
   " package always resolve relative pathnames against the\ncurrent user directory.  This directory is named by the system property\n"}
  {:type "html", :content "<pre>user.dir</pre> "}
  {:type "text",
   :content
   ", and is typically the directory in which the Java\nvirtual machine was invoked.\n\nThe "}
  {:type "html", :content "<em> parent </em>"}
  {:type "text",
   :content
   " of an abstract pathname may be obtained by invoking\nthe "}
  {:type "html", :content "<pre>#getParent</pre> "}
  {:type "text",
   :content
   " method of this class and consists of the pathname's\nprefix and each name in the pathname's name sequence except for the last.\nEach directory's absolute pathname is an ancestor of any "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   "\nobject with an absolute abstract pathname which begins with the directory's\nabsolute pathname.  For example, the directory denoted by the abstract\npathname "}
  {:type "html", :content "<pre>\"/usr\"</pre> "}
  {:type "text",
   :content
   " is an ancestor of the directory denoted by the\npathname "}
  {:type "html", :content "<pre>\"/usr/local/bin\"</pre> "}
  {:type "text",
   :content
   ".\n\nThe prefix concept is used to handle root directories on UNIX platforms,\nand drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms,\nas follows:\n\n"}
  {:type "html",
   :content
   "<ul>\n\n<li>  For UNIX platforms, the prefix of an absolute pathname is always\n  <pre>\"/\"</pre>  .  Relative pathnames have no prefix.  The abstract pathname\n denoting the root directory has the prefix  <pre>\"/\"</pre>   and an empty\n name sequence.\n\n<li>  For Microsoft Windows platforms, the prefix of a pathname that contains a drive\n specifier consists of the drive letter followed by  <pre>\":\"</pre>   and\n possibly followed by  <pre>\"\\\\\"</pre>   if the pathname is absolute.  The\n prefix of a UNC pathname is  <pre>\"\\\\\\\\\"</pre>  ; the hostname and the share\n name are the first two names in the name sequence.  A relative pathname that\n does not specify a drive has no prefix.\n\n</ul>"}
  {:type "text",
   :content
   "\n\nInstances of this class may or may not denote an actual file-system\nobject such as a file or a directory.  If it does denote such an object\nthen that object resides in a "}
  {:type "html", :content "<i> partition </i>"}
  {:type "text",
   :content
   ".  A partition is an\noperating system-specific portion of storage for a file system.  A single\nstorage device (e.g. a physical disk-drive, flash memory, CD-ROM) may\ncontain multiple partitions.  The object, if any, will reside on the\npartition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text",
   :content
   " by some ancestor of the absolute\nform of this pathname.\n\nA file system may implement restrictions to certain operations on the\nactual file-system object, such as reading, writing, and executing.  These\nrestrictions are collectively known as "}
  {:type "html", :content "<i> access permissions </i>"}
  {:type "text",
   :content
   ".  The file\nsystem may have multiple sets of access permissions on a single object.\nFor example, one set may apply to the object's "}
  {:type "html", :content "<i> owner </i>"}
  {:type "text",
   :content
   ", and another\nmay apply to all other users.  The access permissions on an object may\ncause some methods in this class to fail.\n\nInstances of the "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " class are immutable; that is, once\ncreated, the abstract pathname represented by a "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " object\nwill never change.\n\n"}
  {:type "html",
   :content
   "<h2> Interoperability with  <pre>java.nio.file</pre>   package </h2>"}
  {:type "text", :content "\n\nThe "}
  {:type "html", :content "<pre> <pre>java.nio.file</pre>  </pre>"}
  {:type "text",
   :content
   "\npackage defines interfaces and classes for the Java virtual machine to access\nfiles, file attributes, and file systems. This API may be used to overcome\nmany of the limitations of the "}
  {:type "html", :content "<pre>java.io.File</pre> "}
  {:type "text", :content " class.\nThe "}
  {:type "html", :content "<pre>#toPath</pre> "}
  {:type "text", :content " method may be used to obtain a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content " that uses the abstract path represented by a "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " object to\nlocate a file. The resulting "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text", :content " may be used with the "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text",
   :content
   " class to provide more efficient and extensive access to\nadditional file operations, file attributes, and I/O exceptions to help\ndiagnose errors when an operation on a file fails."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "An abstract representation of file and directory pathnames."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the file named by this abstract pathname is a hidden\nfile.  The exact definition of "}
  {:type "html", :content "<em> hidden </em>"}
  {:type "text",
   :content
   " is system-dependent.  On\nUNIX systems, a file is considered to be hidden if its name begins with\na period character ("}
  {:type "html", :content "<pre>'.'</pre> "}
  {:type "text",
   :content
   ").  On Microsoft Windows systems, a file is\nconsidered to be hidden if it has been marked as such in the filesystem."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the file named by this abstract pathname is a hidden\nfile."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file denoted by this\nabstract pathname is hidden according to the conventions of the\nunderlying platform\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "use serialVersionUID from JDK 1.0.2 for interoperability"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "use serialVersionUID from JDK 1.0.2 for interoperability"}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the abstract pathname of this abstract pathname's parent,\nor "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this pathname does not name a parent\ndirectory.\n\nThe "}
  {:type "html", :content "<em> parent </em>"}
  {:type "text",
   :content
   " of an abstract pathname consists of the\npathname's prefix, if any, and each name in the pathname's name\nsequence except for the last.  If the name sequence is empty then\nthe pathname does not name a parent directory."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the abstract pathname of this abstract pathname's parent,\nor "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content " if this pathname does not name a parent\ndirectory."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The abstract pathname of the parent directory named by this\nabstract pathname, or "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " if this pathname\ndoes not name a parent"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the canonical pathname string of this abstract pathname.\n\nA canonical pathname is both absolute and unique.  The precise\ndefinition of canonical form is system-dependent.  This method first\nconverts this pathname to absolute form if necessary, as if by invoking the\n"}
  {:type "html", :content "<pre>#getAbsolutePath</pre> "}
  {:type "text",
   :content
   " method, and then maps it to its unique form in a\nsystem-dependent way.  This typically involves removing redundant names\nsuch as "}
  {:type "html", :content "<pre>\".\"</pre> "}
  {:type "text", :content " and "}
  {:type "html", :content "<pre>\"..\"</pre> "}
  {:type "text",
   :content
   " from the pathname, resolving\nsymbolic links (on UNIX platforms), and converting drive letters to a\nstandard case (on Microsoft Windows platforms).\n\nEvery pathname that denotes an existing file or directory has a\nunique canonical form.  Every pathname that denotes a nonexistent file\nor directory also has a unique canonical form.  The canonical form of\nthe pathname of a nonexistent file or directory may be different from\nthe canonical form of the same pathname after the file or directory is\ncreated.  Similarly, the canonical form of the pathname of an existing\nfile or directory may be different from the canonical form of the same\npathname after the file or directory is deleted."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the canonical pathname string of this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The canonical pathname string denoting the same file or\ndirectory as this abstract pathname\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text",
   :content
   "If an I/O error occurs, which is possible because the\nconstruction of the canonical pathname may require\nfilesystem queries\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "If a required system property value cannot be accessed, or\nif a security manager exists and its "}
  {:type "html",
   :content "<pre>java.lang.SecurityManager#checkRead</pre> "}
  {:type "text", :content " method denies\nread access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The system-dependent path-separator character, represented as a string\nfor convenience.  This string contains a single character, namely\n"}
  {:type "html", :content "<pre>#pathSeparatorChar</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "The system-dependent path-separator character, represented as a string\nfor convenience."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the absolute pathname string of this abstract pathname.\n\nIf this abstract pathname is already absolute, then the pathname\nstring is simply returned as if by the "}
  {:type "html", :content "<pre>#getPath</pre> "}
  {:type "text",
   :content
   "\nmethod.  If this abstract pathname is the empty abstract pathname then\nthe pathname string of the current user directory, which is named by the\nsystem property "}
  {:type "html", :content "<pre>user.dir</pre> "}
  {:type "text",
   :content
   ", is returned.  Otherwise this\npathname is resolved in a system-dependent way.  On UNIX systems, a\nrelative pathname is made absolute by resolving it against the current\nuser directory.  On Microsoft Windows systems, a relative pathname is made absolute\nby resolving it against the current directory of the drive named by the\npathname, if any; if not, it is resolved against the current user\ndirectory."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the absolute pathname string of this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The absolute pathname string denoting the same file or\ndirectory as this abstract pathname\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "If a required system property value cannot be accessed."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the length of the file denoted by this abstract pathname.\nThe return value is unspecified if this pathname denotes a directory.\n\nWhere it is required to distinguish an I/O exception from the case\nthat "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   " is returned, or where several attributes of the same file\nare required at the same time, then the "}
  {:type "html",
   :content
   "<pre>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])</pre> "}
  {:type "text", :content " method may be used."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the length of the file denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The length, in bytes, of the file denoted by this abstract\npathname, or "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   " if the file does not exist.  Some\noperating systems may return "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   " for pathnames\ndenoting system-dependent entities such as devices or pipes.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content "The flag indicating whether the file path is invalid."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The flag indicating whether the file path is invalid."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname that satisfy the specified\nfilter.  The behavior of this method is the same as that of the\n"}
  {:type "html", :content "<pre>#list()</pre> "}
  {:type "text",
   :content
   " method, except that the strings in the returned array\nmust satisfy the filter.  If the given "}
  {:type "html", :content "<pre>filter</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   "\nthen all names are accepted.  Otherwise, a name satisfies the filter if\nand only if the value "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content " results when the "}
  {:type "html", :content "<pre>FilenameFilter#accept</pre> "}
  {:type "text",
   :content
   " method\nof the filter is invoked on this abstract pathname and the name of a\nfile or directory in the directory that it denotes."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname that satisfy the specified\nfilter."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>filter</pre>:&nbsp;"}
  {:type "text", :content "A filename filter\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname that were accepted\nby the given "}
  {:type "html", :content "<pre>filter</pre> "}
  {:type "text",
   :content
   ".  The array will be empty if the\ndirectory is empty or if no names were accepted by the filter.\nReturns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this abstract pathname does not denote\na directory, or if an I/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname.\n\nIf this abstract pathname does not denote a directory, then this\nmethod returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   ".  Otherwise an array of strings is\nreturned, one for each file or directory in the directory.  Names\ndenoting the directory itself and the directory's parent directory are\nnot included in the result.  Each string is a file name rather than a\ncomplete path.\n\nThere is no guarantee that the name strings in the resulting array\nwill appear in any specific order; they are not, in particular,\nguaranteed to appear in alphabetical order.\n\nNote that the "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text", :content " class defines the "}
  {:type "html",
   :content "<pre>java.nio.file.Files#newDirectoryStream(Path)</pre> "}
  {:type "text",
   :content
   " method to\nopen a directory and iterate over the names of the files in the directory.\nThis may use less resources when working with very large directories, and\nmay be more responsive when working with remote directories."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname.  The array will be\nempty if the directory is empty.  Returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if\nthis abstract pathname does not denote a directory, or if an\nI/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's write permission for this abstract\npathname. On some platforms it may be possible to start the Java virtual\nmachine with special privileges that allow it to modify files that\ndisallow write operations.\n\nAn invocation of this method of the form "}
  {:type "html", :content "<pre>file.setWritable(arg)</pre> "}
  {:type "text",
   :content "\nbehaves in exactly the same way as the invocation\n\n"}
  {:type "html",
   :content
   "<pre> <pre>\n     file.setWritable(arg, true)\n </pre>  </pre>"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's write permission for this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>writable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow write\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow write operations\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded.  The\noperation will fail if the user does not have permission to\nchange the access permissions of this abstract pathname.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's write permission for this abstract\npathname. On some platforms it may be possible to start the Java virtual\nmachine with special privileges that allow it to modify files that\ndisallow write operations.\n\nThe "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text",
   :content
   " class defines methods that operate on\nfile attributes including file permissions. This may be used when finer\nmanipulation of file permissions is required."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's write permission for this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>writable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow write\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow write operations\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>ownerOnly</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", the write permission applies only to the\nowner's write permission; otherwise, it applies to everybody.  If\nthe underlying file system can not distinguish the owner's write\npermission from that of others, then the permission will apply to\neverybody, regardless of this value.\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded. The\noperation will fail if the user does not have permission to change\nthe access permissions of this abstract pathname.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod denies write access to the named file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the time that the file denoted by this abstract pathname was\nlast modified."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the time that the file denoted by this abstract pathname was\nlast modified."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "A "}
  {:type "html", :content "<pre>long</pre> "}
  {:type "text",
   :content
   " value representing the time the file was\nlast modified, measured in milliseconds since the epoch\n(00:00:00 GMT, January 1, 1970), or "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   " if the\nfile does not exist or if an I/O error occurs.  The value may\nbe negative indicating the number of milliseconds before the\nepoch\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Computes a hash code for this abstract pathname.  Because equality of\nabstract pathnames is inherently system-dependent, so is the computation\nof their hash codes.  On UNIX systems, the hash code of an abstract\npathname is equal to the exclusive "}
  {:type "html", :content "<em> or </em>"}
  {:type "text",
   :content
   " of the hash code\nof its pathname string and the decimal value\n"}
  {:type "html", :content "<pre>1234321</pre> "}
  {:type "text",
   :content
   ".  On Microsoft Windows systems, the hash\ncode is equal to the exclusive "}
  {:type "html", :content "<em> or </em>"}
  {:type "text",
   :content
   " of the hash code of\nits pathname string converted to lower case and the decimal\nvalue "}
  {:type "html", :content "<pre>1234321</pre> "}
  {:type "text",
   :content
   ".  Locale is not taken into account on\nlowercasing the pathname string."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Computes a hash code for this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "A hash code for this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The length of this abstract pathname's prefix, or zero if it has no\nprefix."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "The length of this abstract pathname's prefix, or zero if it has no\nprefix."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's execute permission for this\nabstract pathname. On some platforms it may be possible to start the Java\nvirtual machine with special privileges that allow it to execute files\nthat are not marked executable.\n\nAn invocation of this method of the form "}
  {:type "html", :content "<pre>file.setExcutable(arg)</pre> "}
  {:type "text",
   :content "\nbehaves in exactly the same way as the invocation\n\n"}
  {:type "html",
   :content
   "<pre> <pre>\n     file.setExecutable(arg, true)\n </pre>  </pre>"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's execute permission for this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>executable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow execute\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow execute operations\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded.  The\noperation will fail if the user does not have permission to\nchange the access permissions of this abstract pathname.  If\n"}
  {:type "html", :content "<pre>executable</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text",
   :content
   " and the underlying\nfile system does not implement an execute permission, then the\noperation will fail.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's execute permission for this abstract\npathname. On some platforms it may be possible to start the Java virtual\nmachine with special privileges that allow it to execute files that are\nnot marked executable.\n\nThe "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text",
   :content
   " class defines methods that operate on\nfile attributes including file permissions. This may be used when finer\nmanipulation of file permissions is required."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's execute permission for this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>executable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow execute\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow execute operations\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>ownerOnly</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", the execute permission applies only to the\nowner's execute permission; otherwise, it applies to everybody.\nIf the underlying file system can not distinguish the owner's\nexecute permission from that of others, then the permission will\napply to everybody, regardless of this value.\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded.  The\noperation will fail if the user does not have permission to\nchange the access permissions of this abstract pathname.  If\n"}
  {:type "html", :content "<pre>executable</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text",
   :content
   " and the underlying\nfile system does not implement an execute permission, then the\noperation will fail.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the length of this abstract pathname's prefix.\nFor use by FileSystem classes."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns the length of this abstract pathname's prefix."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Requests that the file or directory denoted by this abstract\npathname be deleted when the virtual machine terminates.\nFiles (or directories) are deleted in the reverse order that\nthey are registered. Invoking this method to delete a file or\ndirectory that is already registered for deletion has no effect.\nDeletion will be attempted only for normal termination of the\nvirtual machine, as defined by the Java Language Specification.\n\nOnce deletion has been requested, it is not possible to cancel the\nrequest.  This method should therefore be used with care.\n\n"}
  {:type "html",
   :content
   "<P> \n Note: this method should  <i> not </i>  be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n  <pre>java.nio.channels.FileLock</pre>  \n facility should be used instead."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Requests that the file or directory denoted by this abstract\npathname be deleted when the virtual machine terminates."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>java.lang.SecurityManager#checkDelete</pre> "}
  {:type "text", :content " method denies\ndelete access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Renames the file denoted by this abstract pathname.\n\nMany aspects of the behavior of this method are inherently\nplatform-dependent: The rename operation might not be able to move a\nfile from one filesystem to another, it might not be atomic, and it\nmight not succeed if a file with the destination abstract pathname\nalready exists.  The return value should always be checked to make sure\nthat the rename operation was successful.\n\nNote that the "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text", :content " class defines the "}
  {:type "html", :content "<pre>java.nio.file.Files#move</pre> "}
  {:type "text",
   :content
   " method to move or rename a file in a\nplatform independent manner."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Renames the file denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>dest</pre>:&nbsp;"}
  {:type "text",
   :content "The new abstract pathname for the named file\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if and only if the renaming succeeded;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content
   "\nmethod denies write access to either the old or new pathnames\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "If parameter "}
  {:type "html", :content "<pre>dest</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the number of bytes available to this virtual machine on the\npartition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text",
   :content
   " by this abstract pathname.  If\nthe number of available bytes in the partition is greater than\n"}
  {:type "html", :content "<pre>Long#MAX_VALUE</pre> "}
  {:type "text", :content ", then "}
  {:type "html", :content "<pre>Long.MAX_VALUE</pre> "}
  {:type "text",
   :content
   " will be returned.\nWhen possible, this method checks for write permissions and other\noperating system restrictions and will therefore usually provide a more\naccurate estimate of how much new data can actually be written than\n"}
  {:type "html", :content "<pre>#getFreeSpace</pre> "}
  {:type "text",
   :content
   ".\n\nThe returned number of available bytes is a hint, but not a\nguarantee, that it is possible to use most or any of these bytes.  The\nnumber of available bytes is most likely to be accurate immediately\nafter this call.  It is likely to be made inaccurate by any external\nI/O operations including those made on the system outside of this\nvirtual machine.  This method makes no guarantee that write operations\nto this file system will succeed."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the number of bytes available to this virtual machine on the\npartition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text", :content " by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "The number of available bytes on the partition or "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   "\nif the abstract pathname does not name a partition or if this\nnumber cannot be obtained.  On systems where this information\nis not available, this method will be equivalent to a call to\n"}
  {:type "html", :content "<pre>#getFreeSpace</pre> "}
  {:type "text", :content ".\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "If a security manager has been installed and it denies\n"}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>(\"getFileSystemAttributes\")</pre> "}
  {:type "text", :content "\nor its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content
   " method denies\nread access to the file named by this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests this abstract pathname for equality with the given object.\nReturns "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content " if and only if the argument is not\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " and is an abstract pathname that denotes the same file\nor directory as this abstract pathname.  Whether or not two abstract\npathnames are equal depends upon the underlying system.  On UNIX\nsystems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\nsystems it is not."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests this abstract pathname for equality with the given object."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>obj</pre>:&nbsp;"}
  {:type "text",
   :content
   "The object to be compared with this abstract pathname\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content " if and only if the objects are the same;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the pathname string of this abstract pathname.  This is just the\nstring returned by the "}
  {:type "html", :content "<pre>#getPath</pre> "}
  {:type "text", :content " method."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns the pathname string of this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "The string form of this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Converts this abstract pathname into a pathname string.  The resulting\nstring uses the "}
  {:type "html", :content "<pre>#separator</pre> "}
  {:type "text",
   :content " to\nseparate the names in the name sequence."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Converts this abstract pathname into a pathname string."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "The string form of this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content
   "List the available filesystem roots.\n\nA particular Java platform may support zero or more\nhierarchically-organized file systems.  Each file system has a\n"}
  {:type "html", :content "<pre>root</pre> "}
  {:type "text",
   :content
   " directory from which all other files in that file system\ncan be reached.  Windows platforms, for example, have a root directory\nfor each active drive; UNIX platforms have a single root directory,\nnamely "}
  {:type "html", :content "<pre>\"/\"</pre> "}
  {:type "text",
   :content
   ".  The set of available filesystem roots is affected\nby various system-level operations such as the insertion or ejection of\nremovable media and the disconnecting or unmounting of physical or\nvirtual disk drives.\n\nThis method returns an array of "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " objects that denote the\nroot directories of the available filesystem roots.  It is guaranteed\nthat the canonical pathname of any file physically present on the local\nmachine will begin with one of the roots returned by this method.\n\nThe canonical pathname of a file that resides on some other machine\nand is accessed via a remote-filesystem protocol such as SMB or NFS may\nor may not begin with one of the roots returned by this method.  If the\npathname of a remote file is syntactically indistinguishable from the\npathname of a local file then it will begin with one of the roots\nreturned by this method.  Thus, for example, "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " objects\ndenoting the root directories of the mapped network drives of a Windows\nplatform will be returned by this method, while "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " objects\ncontaining UNC pathnames will not be returned by this method.\n\nUnlike most methods in this class, this method does not throw\nsecurity exceptions.  If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content
   " method denies read access to a\nparticular root directory, then that directory will not appear in the\nresult."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "List the available filesystem roots."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "An array of "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content " objects denoting the available\nfilesystem roots, or "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if the set of roots could not\nbe determined.  The array will be empty if there are no\nfilesystem roots."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Deletes the file or directory denoted by this abstract pathname.  If\nthis pathname denotes a directory, then the directory must be empty in\norder to be deleted.\n\nNote that the "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text", :content " class defines the "}
  {:type "html",
   :content "<pre>java.nio.file.Files#delete(Path)</pre> "}
  {:type "text", :content " method to throw an "}
  {:type "html", :content "<pre>IOException</pre> "}
  {:type "text",
   :content
   "\nwhen a file cannot be deleted. This is useful for error reporting and to\ndiagnose why a file cannot be deleted."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Deletes the file or directory denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file or directory is\nsuccessfully deleted; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>java.lang.SecurityManager#checkDelete</pre> "}
  {:type "text", :content " method denies\ndelete access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the absolute form of this abstract pathname.  Equivalent to\n"}
  {:type "html",
   :content
   "<code> new &nbsp; File(this. <pre>#getAbsolutePath</pre>  ) </code>"}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns the absolute form of this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The absolute abstract pathname denoting the same file or\ndirectory as this abstract pathname\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "If a required system property value cannot be accessed."}]}

{:doc-fragments
 [{:type "text",
   :content
   "readObject is called to restore this filename.\nThe original separator character is read.  If it is different\nthan the separator character on this system, then the old separator\nis replaced by the local separator."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "readObject is called to restore this filename."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>s</pre>:&nbsp;"}
  {:type "text", :content "the "}
  {:type "html", :content "<pre>ObjectInputStream</pre> "}
  {:type "text", :content " from which data is read\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text", :content "if an I/O error occurs\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>ClassNotFoundException</pre>:&nbsp;"}
  {:type "text", :content "if a serialized class cannot be loaded"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the canonical form of this abstract pathname.  Equivalent to\n"}
  {:type "html",
   :content
   "<code> new &nbsp; File(this. <pre>#getCanonicalPath</pre>  ) </code>"}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Returns the canonical form of this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The canonical pathname string denoting the same file or\ndirectory as this abstract pathname\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text",
   :content
   "If an I/O error occurs, which is possible because the\nconstruction of the canonical pathname may require\nfilesystem queries\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "If a required system property value cannot be accessed, or\nif a security manager exists and its "}
  {:type "html",
   :content "<pre>java.lang.SecurityManager#checkRead</pre> "}
  {:type "text", :content " method denies\nread access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The system-dependent default name-separator character.  This field is\ninitialized to contain the first character of the value of the system\nproperty "}
  {:type "html", :content "<pre>file.separator</pre> "}
  {:type "text",
   :content ".  On UNIX systems the value of this\nfield is "}
  {:type "html", :content "<pre>'/'</pre> "}
  {:type "text", :content "; on Microsoft Windows systems it is "}
  {:type "html", :content "<pre>'\\\\'</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The system-dependent default name-separator character."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "WriteObject is called to save this filename.\nThe separator character is saved also so it can be replaced\nin case the path is reconstituted on a different host type."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "WriteObject is called to save this filename."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>s</pre>:&nbsp;"}
  {:type "text", :content "the "}
  {:type "html", :content "<pre>ObjectOutputStream</pre> "}
  {:type "text", :content " to which data is written\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text", :content "if an I/O error occurs"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Creates an empty file in the default temporary-file directory, using\nthe given prefix and suffix to generate its name. Invoking this method\nis equivalent to invoking "}
  {:type "html",
   :content
   "<pre>#createTempFile(java.lang.String,\n java.lang.String, java.io.File)</pre> "}
  {:type "text", :content ".\n\nThe "}
  {:type "html",
   :content
   "<pre>java.nio.file.Files#createTempFile(String,String,java.nio.file.attribute.FileAttribute[])</pre> "}
  {:type "text",
   :content
   " method provides an alternative method to create an\nempty file in the temporary-file directory. Files created by that method\nmay have more restrictive access permissions to files created by this\nmethod and so may be more suited to security-sensitive applications."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Creates an empty file in the default temporary-file directory, using\nthe given prefix and suffix to generate its name."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>prefix</pre>:&nbsp;"}
  {:type "text",
   :content
   "The prefix string to be used in generating the file's\nname; must be at least three characters long\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>suffix</pre>:&nbsp;"}
  {:type "text",
   :content
   "The suffix string to be used in generating the file's\nname; may be "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", in which case the\nsuffix "}
  {:type "html", :content "<pre>\".tmp\"</pre> "}
  {:type "text", :content " will be used\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An abstract pathname denoting a newly-created empty file\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "If the "}
  {:type "html", :content "<pre>prefix</pre> "}
  {:type "text",
   :content " argument contains fewer than three\ncharacters\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text", :content "If a file could not be created\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod does not allow a file to be created"}]}

{:doc-fragments
 [{:type "text",
   :content
   "\n\nCreates a new empty file in the specified directory, using the\ngiven prefix and suffix strings to generate its name.  If this method\nreturns successfully then it is guaranteed that:\n\n"}
  {:type "html",
   :content
   "<ol> \n  <li>  The file denoted by the returned abstract pathname did not exist\n      before this method was invoked, and\n  <li>  Neither this method nor any of its variants will return the same\n      abstract pathname again in the current invocation of the virtual\n      machine.\n  </ol>"}
  {:type "text",
   :content
   "\n\nThis method provides only part of a temporary-file facility.  To arrange\nfor a file created by this method to be deleted automatically, use the\n"}
  {:type "html", :content "<pre>#deleteOnExit</pre> "}
  {:type "text", :content " method.\n\nThe "}
  {:type "html", :content "<pre>prefix</pre> "}
  {:type "text",
   :content
   " argument must be at least three characters\nlong.  It is recommended that the prefix be a short, meaningful string\nsuch as "}
  {:type "html", :content "<pre>\"hjb\"</pre> "}
  {:type "text", :content " or "}
  {:type "html", :content "<pre>\"mail\"</pre> "}
  {:type "text", :content ".  The\n"}
  {:type "html", :content "<pre>suffix</pre> "}
  {:type "text", :content " argument may be "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", in which case the\nsuffix "}
  {:type "html", :content "<pre>\".tmp\"</pre> "}
  {:type "text",
   :content
   " will be used.\n\nTo create the new file, the prefix and the suffix may first be\nadjusted to fit the limitations of the underlying platform.  If the\nprefix is too long then it will be truncated, but its first three\ncharacters will always be preserved.  If the suffix is too long then it\ntoo will be truncated, but if it begins with a period character\n("}
  {:type "html", :content "<pre>'.'</pre> "}
  {:type "text",
   :content
   ") then the period and the first three characters\nfollowing it will always be preserved.  Once these adjustments have been\nmade the name of the new file will be generated by concatenating the\nprefix, five or more internally-generated characters, and the suffix.\n\nIf the "}
  {:type "html", :content "<pre>directory</pre> "}
  {:type "text", :content " argument is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " then the\nsystem-dependent default temporary-file directory will be used.  The\ndefault temporary-file directory is specified by the system property\n"}
  {:type "html", :content "<pre>java.io.tmpdir</pre> "}
  {:type "text",
   :content
   ".  On UNIX systems the default value of this\nproperty is typically "}
  {:type "html", :content "<pre>\"/tmp\"</pre> "}
  {:type "text", :content " or "}
  {:type "html", :content "<pre>\"/var/tmp\"</pre> "}
  {:type "text",
   :content "; on\nMicrosoft Windows systems it is typically "}
  {:type "html", :content "<pre>\"C:\\\\WINNT\\\\TEMP\"</pre> "}
  {:type "text",
   :content
   ".  A different\nvalue may be given to this system property when the Java virtual machine\nis invoked, but programmatic changes to this property are not guaranteed\nto have any effect upon the temporary directory used by this method."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "\n\nCreates a new empty file in the specified directory, using the\ngiven prefix and suffix strings to generate its name."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>prefix</pre>:&nbsp;"}
  {:type "text",
   :content
   "The prefix string to be used in generating the file's\nname; must be at least three characters long\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>suffix</pre>:&nbsp;"}
  {:type "text",
   :content
   "The suffix string to be used in generating the file's\nname; may be "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ", in which case the\nsuffix "}
  {:type "html", :content "<pre>\".tmp\"</pre> "}
  {:type "text", :content " will be used\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>directory</pre>:&nbsp;"}
  {:type "text",
   :content "The directory in which the file is to be created, or\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if the default temporary-file\ndirectory is to be used\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An abstract pathname denoting a newly-created empty file\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "If the "}
  {:type "html", :content "<pre>prefix</pre> "}
  {:type "text",
   :content " argument contains fewer than three\ncharacters\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text", :content "If a file could not be created\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod does not allow a file to be created"}]}

{:doc-fragments
 [{:type "text", :content "Returns a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content
   " object constructed from\nthis abstract path. The resulting "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text", :content " is associated with the\n"}
  {:type "html",
   :content "<pre>java.nio.file.FileSystems#getDefault</pre> "}
  {:type "text",
   :content
   ".\n\nThe first invocation of this method works as if invoking it were\nequivalent to evaluating the expression:\n"}
  {:type "html",
   :content
   "<blockquote> <pre> \n  <pre>java.nio.file.FileSystems#getDefault</pre>  (). <pre>java.nio.file.FileSystem#getPath</pre>  (this. <pre>#getPath</pre>  ());\n  </pre> </blockquote>"}
  {:type "text",
   :content "\nSubsequent invocations of this method return the same "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content
   ".\n\nIf this abstract pathname is the empty abstract pathname then this\nmethod returns a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content
   " that may be used to access the current\nuser directory."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content " object constructed from\nthis abstract path."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text", :content " constructed from this abstract path\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>java.nio.file.InvalidPathException</pre>:&nbsp;"}
  {:type "text", :content "if a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text",
   :content
   " object cannot be constructed from the abstract\npath (see "}
  {:type "html",
   :content "<pre>java.nio.file.FileSystem#getPath</pre> "}
  {:type "text", :content ")"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Marks the file or directory named by this abstract pathname so that\nonly read operations are allowed. After invoking this method the file\nor directory will not change until it is either deleted or marked\nto allow write access. On some platforms it may be possible to start the\nJava virtual machine with special privileges that allow it to modify\nfiles that are marked read-only. Whether or not a read-only file or\ndirectory may be deleted depends upon the underlying system."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Marks the file or directory named by this abstract pathname so that\nonly read operations are allowed."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if and only if the operation succeeded;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod denies write access to the named file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Creates the directory named by this abstract pathname, including any\nnecessary but nonexistent parent directories.  Note that if this\noperation fails it may have succeeded in creating some of the necessary\nparent directories."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Creates the directory named by this abstract pathname, including any\nnecessary but nonexistent parent directories."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the directory was created,\nalong with all necessary parent directories; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content "\notherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text",
   :content
   "\nmethod does not permit verification of the existence of the\nnamed directory and all necessary parent directories; or if\nthe "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content
   "\nmethod does not permit the named directory and all necessary\nparent directories to be created"}]}

{:doc-fragments
 [{:type "text", :content "Constructs a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content
   " URI that represents this abstract pathname.\n\nThe exact form of the URI is system-dependent.  If it can be\ndetermined that the file denoted by this abstract pathname is a\ndirectory, then the resulting URI will end with a slash.\n\nFor a given abstract pathname "}
  {:type "html", :content "<i> f </i>"}
  {:type "text", :content ", it is guaranteed that\n\n"}
  {:type "html",
   :content
   "<blockquote> <code> \n new  <pre>#File(java.net.URI)</pre>  ( </code> <i> &nbsp; f </i> <code> .toURI()).equals(\n  </code> <i> &nbsp; f </i> <code> . <pre>#getAbsoluteFile()</pre>  ())\n  </code> </blockquote>"}
  {:type "text",
   :content
   "\n\nso long as the original abstract pathname, the URI, and the new abstract\npathname are all created in (possibly different invocations of) the same\nJava virtual machine.  Due to the system-dependent nature of abstract\npathnames, however, this relationship typically does not hold when a\n"}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content
   " URI that is created in a virtual machine on one operating\nsystem is converted into an abstract pathname in a virtual machine on a\ndifferent operating system.\n\nNote that when this abstract pathname represents a UNC pathname then\nall components of the UNC (including the server name component) are encoded\nin the "}
  {:type "html", :content "<pre>URI</pre> "}
  {:type "text",
   :content
   " path. The authority component is undefined, meaning\nthat it is represented as "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ". The "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text", :content " class defines the\n"}
  {:type "html", :content "<pre>Path#toUri</pre> "}
  {:type "text",
   :content
   " method to encode the server name in the authority\ncomponent of the resulting "}
  {:type "html", :content "<pre>URI</pre> "}
  {:type "text", :content ". The "}
  {:type "html", :content "<pre>#toPath</pre> "}
  {:type "text", :content " method\nmay be used to obtain a "}
  {:type "html", :content "<pre>Path</pre> "}
  {:type "text", :content " representing this abstract pathname."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Constructs a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content " URI that represents this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "An absolute, hierarchical URI with a scheme equal to\n"}
  {:type "html", :content "<pre>\"file\"</pre> "}
  {:type "text",
   :content
   ", a path representing this abstract pathname,\nand undefined authority, query, and fragment components\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content
   "If a required system property value cannot\nbe accessed."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the file denoted by this abstract pathname is a normal\nfile.  A file is "}
  {:type "html", :content "<em> normal </em>"}
  {:type "text",
   :content
   " if it is not a directory and, in\naddition, satisfies other system-dependent criteria.  Any non-directory\nfile created by a Java application is guaranteed to be a normal file.\n\nWhere it is required to distinguish an I/O exception from the case\nthat the file is not a normal file, or where several attributes of the\nsame file are required at the same time, then the "}
  {:type "html",
   :content
   "<pre>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])</pre> "}
  {:type "text", :content " method may be used."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the file denoted by this abstract pathname is a normal\nfile."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file denoted by this\nabstract pathname exists "}
  {:type "html", :content "<em> and </em>"}
  {:type "text", :content " is a normal file;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the number of unallocated bytes in the partition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text",
   :content
   " by this abstract path name.  If the\nnumber of unallocated bytes in the partition is greater than\n"}
  {:type "html", :content "<pre>Long#MAX_VALUE</pre> "}
  {:type "text", :content ", then "}
  {:type "html", :content "<pre>Long.MAX_VALUE</pre> "}
  {:type "text",
   :content
   " will be returned.\n\nThe returned number of unallocated bytes is a hint, but not\na guarantee, that it is possible to use most or any of these\nbytes.  The number of unallocated bytes is most likely to be\naccurate immediately after this call.  It is likely to be made\ninaccurate by any external I/O operations including those made\non the system outside of this virtual machine.  This method\nmakes no guarantee that write operations to this file system\nwill succeed."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the number of unallocated bytes in the partition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text", :content " by this abstract path name."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "The number of unallocated bytes on the partition or "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   "\nif the abstract pathname does not name a partition or if this\nnumber cannot be obtained.  This value will be less than or\nequal to the total file system size returned by\n"}
  {:type "html", :content "<pre>#getTotalSpace</pre> "}
  {:type "text", :content ".\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "If a security manager has been installed and it denies\n"}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>(\"getFileSystemAttributes\")</pre> "}
  {:type "text", :content "\nor its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content
   " method denies\nread access to the file named by this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content "Creates the directory named by this abstract pathname."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Creates the directory named by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content " if and only if the directory was\ncreated; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content
   "\nmethod does not permit the named directory to be created"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname that\nsatisfy the specified filter.  The behavior of this method is the same\nas that of the "}
  {:type "html", :content "<pre>#listFiles()</pre> "}
  {:type "text",
   :content
   " method, except that the pathnames in\nthe returned array must satisfy the filter.  If the given "}
  {:type "html", :content "<pre>filter</pre> "}
  {:type "text", :content "\nis "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " then all pathnames are accepted.  Otherwise, a pathname\nsatisfies the filter if and only if the value "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content " results when\nthe "}
  {:type "html", :content "<pre>FileFilter#accept</pre> "}
  {:type "text",
   :content " method of the\nfilter is invoked on the pathname."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname that\nsatisfy the specified filter."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>filter</pre>:&nbsp;"}
  {:type "text", :content "A file filter\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname.\nThe array will be empty if the directory is empty.  Returns\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this abstract pathname does not denote a\ndirectory, or if an I/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname that\nsatisfy the specified filter.  The behavior of this method is the same\nas that of the "}
  {:type "html", :content "<pre>#listFiles()</pre> "}
  {:type "text",
   :content
   " method, except that the pathnames in\nthe returned array must satisfy the filter.  If the given "}
  {:type "html", :content "<pre>filter</pre> "}
  {:type "text", :content "\nis "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " then all pathnames are accepted.  Otherwise, a pathname\nsatisfies the filter if and only if the value "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text", :content " results when\nthe "}
  {:type "html", :content "<pre>FilenameFilter#accept</pre> "}
  {:type "text",
   :content
   " method of the filter is\ninvoked on this abstract pathname and the name of a file or directory in\nthe directory that it denotes."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname that\nsatisfy the specified filter."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>filter</pre>:&nbsp;"}
  {:type "text", :content "A filename filter\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname.\nThe array will be empty if the directory is empty.  Returns\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this abstract pathname does not denote a\ndirectory, or if an I/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files in the\ndirectory denoted by this abstract pathname.\n\nIf this abstract pathname does not denote a directory, then this\nmethod returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content ".  Otherwise an array of "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " objects\nis returned, one for each file or directory in the directory.  Pathnames\ndenoting the directory itself and the directory's parent directory are\nnot included in the result.  Each resulting abstract pathname is\nconstructed from this abstract pathname using the "}
  {:type "html", :content "<pre>#File(File,\n String)</pre> "}
  {:type "text",
   :content
   " constructor.  Therefore if this\npathname is absolute then each resulting pathname is absolute; if this\npathname is relative then each resulting pathname will be relative to\nthe same directory.\n\nThere is no guarantee that the name strings in the resulting array\nwill appear in any specific order; they are not, in particular,\nguaranteed to appear in alphabetical order.\n\nNote that the "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text", :content " class defines the "}
  {:type "html",
   :content "<pre>java.nio.file.Files#newDirectoryStream(Path)</pre> "}
  {:type "text",
   :content
   " method\nto open a directory and iterate over the names of the files in the\ndirectory. This may use less resources when working with very large\ndirectories."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of abstract pathnames denoting the files in the\ndirectory denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of abstract pathnames denoting the files and\ndirectories in the directory denoted by this abstract pathname.\nThe array will be empty if the directory is empty.  Returns\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this abstract pathname does not denote a\ndirectory, or if an I/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether this abstract pathname is absolute.  The definition of\nabsolute pathname is system dependent.  On UNIX systems, a pathname is\nabsolute if its prefix is "}
  {:type "html", :content "<pre>\"/\"</pre> "}
  {:type "text",
   :content
   ".  On Microsoft Windows systems, a\npathname is absolute if its prefix is a drive specifier followed by\n"}
  {:type "html", :content "<pre>\"\\\\\"</pre> "}
  {:type "text", :content ", or if its prefix is "}
  {:type "html", :content "<pre>\"\\\\\\\\\"</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Tests whether this abstract pathname is absolute."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if this abstract pathname is absolute,\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The system-dependent path-separator character.  This field is\ninitialized to contain the first character of the value of the system\nproperty "}
  {:type "html", :content "<pre>path.separator</pre> "}
  {:type "text",
   :content
   ".  This character is used to\nseparate filenames in a sequence of files given as a "}
  {:type "html", :content "<em> path list </em>"}
  {:type "text", :content ".\nOn UNIX systems, this character is "}
  {:type "html", :content "<pre>':'</pre> "}
  {:type "text", :content "; on Microsoft Windows systems it\nis "}
  {:type "html", :content "<pre>';'</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "The system-dependent path-separator character."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Atomically creates a new, empty file named by this abstract pathname if\nand only if a file with this name does not yet exist.  The check for the\nexistence of the file and the creation of the file if it does not exist\nare a single operation that is atomic with respect to all other\nfilesystem activities that might affect the file.\n"}
  {:type "html",
   :content
   "<P> \n Note: this method should  <i> not </i>  be used for file-locking, as\n the resulting protocol cannot be made to work reliably. The\n  <pre>java.nio.channels.FileLock</pre>  \n facility should be used instead."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Atomically creates a new, empty file named by this abstract pathname if\nand only if a file with this name does not yet exist."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if the named file does not exist and was\nsuccessfully created; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " if the named file\nalready exists\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>IOException</pre>:&nbsp;"}
  {:type "text", :content "If an I/O error occurred\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Check if the file has an invalid path. Currently, the inspection of\na file path is very limited, and it only covers Nul character check.\nReturning true means the path is definitely invalid/garbage. But\nreturning false does not guarantee that the path is valid."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Check if the file has an invalid path."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "true if the file path is invalid."}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the application can read the file denoted by this\nabstract pathname. On some platforms it may be possible to start the\nJava virtual machine with special privileges that allow it to read\nfiles that are marked as unreadable. Consequently this method may return\n"}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content " even though the file does not have read permissions."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the application can read the file denoted by this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file specified by this\nabstract pathname exists "}
  {:type "html", :content "<em> and </em>"}
  {:type "text", :content " can be read by the\napplication; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Sets the last-modified time of the file or directory named by this\nabstract pathname.\n\nAll platforms support file-modification times to the nearest second,\nbut some provide more precision.  The argument will be truncated to fit\nthe supported precision.  If the operation succeeds and no intervening\noperations on the file take place, then the next invocation of the\n"}
  {:type "html", :content "<pre>#lastModified</pre> "}
  {:type "text",
   :content " method will return the (possibly\ntruncated) "}
  {:type "html", :content "<pre>time</pre> "}
  {:type "text",
   :content " argument that was passed to this method."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Sets the last-modified time of the file or directory named by this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>time</pre>:&nbsp;"}
  {:type "text",
   :content
   "The new last-modified time, measured in milliseconds since\nthe epoch (00:00:00 GMT, January 1, 1970)\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text", :content " if and only if the operation succeeded;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text", :content "If the argument is negative\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod denies write access to the named file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the file or directory denoted by this abstract pathname\nexists."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the file or directory denoted by this abstract pathname\nexists."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file or directory denoted\nby this abstract pathname exists; "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod denies read access to the file or directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "This abstract pathname's normalized pathname string. A normalized\npathname string uses the default name-separator character and does not\ncontain any duplicate or redundant separators."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "This abstract pathname's normalized pathname string."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the name of the file or directory denoted by this abstract\npathname.  This is just the last name in the pathname's name\nsequence.  If the pathname's name sequence is empty, then the empty\nstring is returned."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the name of the file or directory denoted by this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The name of the file or directory denoted by this abstract\npathname, or the empty string if this pathname's name sequence\nis empty"}]}

{:doc-fragments
 [{:type "text", :content "Returns the size of the partition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text",
   :content
   " by this\nabstract pathname. If the total number of bytes in the partition is\ngreater than "}
  {:type "html", :content "<pre>Long#MAX_VALUE</pre> "}
  {:type "text", :content ", then "}
  {:type "html", :content "<pre>Long.MAX_VALUE</pre> "}
  {:type "text", :content " will be\nreturned."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Returns the size of the partition "}
  {:type "html", :content "<pre> named </pre>"}
  {:type "text", :content " by this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text", :content "The size, in bytes, of the partition or "}
  {:type "html", :content "<pre>0L</pre> "}
  {:type "text",
   :content
   " if this\nabstract pathname does not name a partition or if the size\ncannot be obtained\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text",
   :content "If a security manager has been installed and it denies\n"}
  {:type "html",
   :content
   "<pre>RuntimePermission</pre>  <pre>(\"getFileSystemAttributes\")</pre> "}
  {:type "text", :content "\nor its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content
   " method denies\nread access to the file named by this abstract pathname"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the application can modify the file denoted by this\nabstract pathname. On some platforms it may be possible to start the\nJava virtual machine with special privileges that allow it to modify\nfiles that are marked read-only. Consequently this method may return\n"}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content " even though the file is marked read-only."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the application can modify the file denoted by this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file system actually\ncontains a file denoted by this abstract pathname "}
  {:type "html", :content "<em> and </em>"}
  {:type "text",
   :content "\nthe application is allowed to write to the file;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's read permission for this abstract\npathname. On some platforms it may be possible to start the Java virtual\nmachine with special privileges that allow it to read files that are\nmarked as unreadable.\n\nAn invocation of this method of the form "}
  {:type "html", :content "<pre>file.setReadable(arg)</pre> "}
  {:type "text",
   :content "\nbehaves in exactly the same way as the invocation\n\n"}
  {:type "html",
   :content
   "<pre> <pre>\n     file.setReadable(arg, true)\n </pre>  </pre>"}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "A convenience method to set the owner's read permission for this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>readable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow read\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow read operations\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded.  The\noperation will fail if the user does not have permission to\nchange the access permissions of this abstract pathname.  If\n"}
  {:type "html", :content "<pre>readable</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text",
   :content
   " and the underlying\nfile system does not implement a read permission, then the\noperation will fail.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's read permission for this abstract\npathname. On some platforms it may be possible to start the Java virtual\nmachine with special privileges that allow it to read files that are\nmarked as unreadable.\n\nThe "}
  {:type "html", :content "<pre>java.nio.file.Files</pre> "}
  {:type "text",
   :content
   " class defines methods that operate on\nfile attributes including file permissions. This may be used when finer\nmanipulation of file permissions is required."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Sets the owner's or everybody's read permission for this abstract\npathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>readable</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", sets the access permission to allow read\noperations; if "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " to disallow read operations\n\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>ownerOnly</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   ", the read permission applies only to the\nowner's read permission; otherwise, it applies to everybody.  If\nthe underlying file system can not distinguish the owner's read\npermission from that of others, then the permission will apply to\neverybody, regardless of this value.\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the operation succeeded.  The\noperation will fail if the user does not have permission to\nchange the access permissions of this abstract pathname.  If\n"}
  {:type "html", :content "<pre>readable</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text",
   :content
   " and the underlying\nfile system does not implement a read permission, then the\noperation will fail.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkWrite(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies write access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The FileSystem object representing the platform's local file system."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "The FileSystem object representing the platform's local file system."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " instance by converting the given\n"}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content " URI into an abstract pathname.\n\nThe exact form of a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content
   " URI is system-dependent, hence\nthe transformation performed by this constructor is also\nsystem-dependent.\n\nFor a given abstract pathname "}
  {:type "html", :content "<i> f </i>"}
  {:type "text", :content " it is guaranteed that\n\n"}
  {:type "html",
   :content
   "<blockquote> <code> \n new File( </code> <i> &nbsp; f </i> <code> . <pre>#toURI()</pre>  ()).equals( </code> <i> &nbsp; f </i> <code> . <pre>#getAbsoluteFile()</pre>  ())\n  </code> </blockquote>"}
  {:type "text",
   :content
   "\n\nso long as the original abstract pathname, the URI, and the new abstract\npathname are all created in (possibly different invocations of) the same\nJava virtual machine.  This relationship typically does not hold,\nhowever, when a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content
   " URI that is created in a virtual machine\non one operating system is converted into an abstract pathname in a\nvirtual machine on a different operating system."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " instance by converting the given\n"}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text", :content " URI into an abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>uri</pre>:&nbsp;"}
  {:type "text",
   :content "An absolute, hierarchical URI with a scheme equal to\n"}
  {:type "html", :content "<pre>\"file\"</pre> "}
  {:type "text",
   :content
   ", a non-empty path component, and undefined\nauthority, query, and fragment components\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>uri</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content "\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>IllegalArgumentException</pre>:&nbsp;"}
  {:type "text",
   :content "If the preconditions on the parameter do not hold"}]}

{:doc-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance from a parent abstract\npathname and a child pathname string.\n\nIf "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " then the new\n"}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance is created as if by invoking the\nsingle-argument "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " constructor on the given\n"}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text", :content " pathname string.\n\nOtherwise the "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text",
   :content
   " abstract pathname is taken to\ndenote a directory, and the "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   " pathname string is taken\nto denote either a directory or a file.  If the "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   "\npathname string is absolute then it is converted into a relative\npathname in a system-dependent way.  If "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text",
   :content " is the empty\nabstract pathname then the new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " instance is created by\nconverting "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   " into an abstract pathname and resolving\nthe result against a system-dependent default directory.  Otherwise each\npathname string is converted into an abstract pathname and the child\nabstract pathname is resolved against the parent."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance from a parent abstract\npathname and a child pathname string."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>parent</pre>:&nbsp;"}
  {:type "text", :content "The parent abstract pathname\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>child</pre>:&nbsp;"}
  {:type "text", :content "The child pathname string\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}]}

{:doc-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance from a parent pathname string\nand a child pathname string.\n\nIf "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " then the new\n"}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance is created as if by invoking the\nsingle-argument "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " constructor on the given\n"}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text", :content " pathname string.\n\nOtherwise the "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text",
   :content
   " pathname string is taken to denote\na directory, and the "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   " pathname string is taken to\ndenote either a directory or a file.  If the "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   " pathname\nstring is absolute then it is converted into a relative pathname in a\nsystem-dependent way.  If "}
  {:type "html", :content "<pre>parent</pre> "}
  {:type "text", :content " is the empty string then\nthe new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text", :content " instance is created by converting\n"}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text",
   :content
   " into an abstract pathname and resolving the result\nagainst a system-dependent default directory.  Otherwise each pathname\nstring is converted into an abstract pathname and the child abstract\npathname is resolved against the parent."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance from a parent pathname string\nand a child pathname string."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>parent</pre>:&nbsp;"}
  {:type "text", :content "The parent pathname string\n\n"}
  {:type "html", :content "<i>Param</i>&nbsp;<pre>child</pre>:&nbsp;"}
  {:type "text", :content "The child pathname string\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "If "}
  {:type "html", :content "<pre>child</pre> "}
  {:type "text", :content " is "}
  {:type "html", :content "<pre>null</pre> "}]}

{:doc-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance by converting the given\npathname string into an abstract pathname.  If the given string is\nthe empty string, then the result is the empty abstract pathname."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Creates a new "}
  {:type "html", :content "<pre>File</pre> "}
  {:type "text",
   :content
   " instance by converting the given\npathname string into an abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>pathname</pre>:&nbsp;"}
  {:type "text", :content "A pathname string\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>NullPointerException</pre>:&nbsp;"}
  {:type "text", :content "If the "}
  {:type "html", :content "<pre>pathname</pre> "}
  {:type "text", :content " argument is "}
  {:type "html", :content "<pre>null</pre> "}]}

{:doc-fragments
 [{:type "text",
   :content
   "Internal constructor for already-normalized pathname strings.\nThe parameter order is used to disambiguate this method from the\npublic(File, String) constructor."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Internal constructor for already-normalized pathname strings."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Internal constructor for already-normalized pathname strings."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Internal constructor for already-normalized pathname strings."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns the pathname string of this abstract pathname's parent, or\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if this pathname does not name a parent directory.\n\nThe "}
  {:type "html", :content "<em> parent </em>"}
  {:type "text",
   :content
   " of an abstract pathname consists of the\npathname's prefix, if any, and each name in the pathname's name\nsequence except for the last.  If the name sequence is empty then\nthe pathname does not name a parent directory."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns the pathname string of this abstract pathname's parent, or\n"}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content " if this pathname does not name a parent directory."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "The pathname string of the parent directory named by this\nabstract pathname, or "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text", :content " if this pathname\ndoes not name a parent"}]}

{:doc-fragments
 [{:type "text",
   :content
   "The system-dependent default name-separator character, represented as a\nstring for convenience.  This string contains a single character, namely\n"}
  {:type "html", :content "<pre>#separatorChar</pre> "}
  {:type "text", :content "."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "The system-dependent default name-separator character, represented as a\nstring for convenience."}],
 :doc-block-tags-fragments []}

{:doc-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname.  The strings are\nensured to represent normalized paths."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Returns an array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "An array of strings naming the files and directories in the\ndirectory denoted by this abstract pathname.  The array will be\nempty if the directory is empty.  Returns "}
  {:type "html", :content "<pre>null</pre> "}
  {:type "text",
   :content
   " if\nthis abstract pathname does not denote a directory, or if an\nI/O error occurs.\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content "<pre>SecurityManager#checkRead(String)</pre> "}
  {:type "text",
   :content " method denies read access to\nthe directory"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the file denoted by this abstract pathname is a\ndirectory.\n\nWhere it is required to distinguish an I/O exception from the case\nthat the file is not a directory, or where several attributes of the\nsame file are required at the same time, then the "}
  {:type "html",
   :content
   "<pre>java.nio.file.Files#readAttributes(Path,Class,LinkOption[])</pre> "}
  {:type "text", :content " method may be used."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the file denoted by this abstract pathname is a\ndirectory."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content
   " if and only if the file denoted by this\nabstract pathname exists "}
  {:type "html", :content "<em> and </em>"}
  {:type "text", :content " is a directory;\n"}
  {:type "html", :content "<pre>false</pre> "}
  {:type "text", :content " otherwise\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkRead(java.lang.String)</pre> "}
  {:type "text", :content "\nmethod denies read access to the file"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Tests whether the application can execute the file denoted by this\nabstract pathname. On some platforms it may be possible to start the\nJava virtual machine with special privileges that allow it to execute\nfiles that are not marked executable. Consequently this method may return\n"}
  {:type "html", :content "<pre>true</pre> "}
  {:type "text",
   :content
   " even though the file does not have execute permissions."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content
   "Tests whether the application can execute the file denoted by this\nabstract pathname."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp; <pre>true</pre> "}
  {:type "text",
   :content " if and only if the abstract pathname exists\n"}
  {:type "html", :content "<em> and </em>"}
  {:type "text",
   :content " the application is allowed to execute the file\n\n"}
  {:type "html",
   :content "<i>Throws</i>:&nbsp;<pre>SecurityException</pre>:&nbsp;"}
  {:type "text", :content "If a security manager exists and its "}
  {:type "html",
   :content
   "<pre>java.lang.SecurityManager#checkExec(java.lang.String)</pre> "}
  {:type "text",
   :content "\nmethod denies execute access to the file"}]}

{:doc-fragments
 [{:type "text", :content "Converts this abstract pathname into a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text",
   :content
   " URL.  The\nexact form of the URL is system-dependent.  If it can be determined that\nthe file denoted by this abstract pathname is a directory, then the\nresulting URL will end with a slash."}],
 :doc-first-sentence-fragments
 [{:type "text", :content "Converts this abstract pathname into a "}
  {:type "html", :content "<pre>file:</pre> "}
  {:type "text", :content " URL."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content "A URL object representing the equivalent file URL\n\n"}
  {:type "html",
   :content
   "<i>Throws</i>:&nbsp;<pre>MalformedURLException</pre>:&nbsp;"}
  {:type "text", :content "If the path cannot be parsed as a URL"}]}

{:doc-fragments
 [{:type "text",
   :content
   "Compares two abstract pathnames lexicographically.  The ordering\ndefined by this method depends upon the underlying system.  On UNIX\nsystems, alphabetic case is significant in comparing pathnames; on Microsoft Windows\nsystems it is not."}],
 :doc-first-sentence-fragments
 [{:type "text",
   :content "Compares two abstract pathnames lexicographically."}],
 :doc-block-tags-fragments
 [{:type "text", :content "\n"}
  {:type "html",
   :content "<i>Param</i>&nbsp;<pre>pathname</pre>:&nbsp;"}
  {:type "text",
   :content
   "The abstract pathname to be compared to this abstract\npathname\n\n"}
  {:type "html", :content "<i>Returns</i>:&nbsp;"}
  {:type "text",
   :content
   "Zero if the argument is equal to this abstract pathname, a\nvalue less than zero if this abstract pathname is\nlexicographically less than the argument, or a value greater\nthan zero if this abstract pathname is lexicographically\ngreater than the argument"}]}

]